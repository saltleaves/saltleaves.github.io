{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yilia/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/coderwall.png","path":"img/coderwall.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/delicious.png","path":"img/delicious.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/douban.png","path":"img/douban.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/facebook.png","path":"img/facebook.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/github.png","path":"img/github.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/google.png","path":"img/google.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/linkedin.png","path":"img/linkedin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/mail.png","path":"img/mail.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinboard.png","path":"img/pinboard.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/pinterest.png","path":"img/pinterest.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/rss.png","path":"img/rss.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/stackoverflow.png","path":"img/stackoverflow.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/twitter.png","path":"img/twitter.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/weibo.png","path":"img/weibo.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/zhihu.png","path":"img/zhihu.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","path":"css/fonts/fontawesome-webfont.svgz","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"e7c389d4285bd0010a942e22856bc0673d4966a3","modified":1489391206839},{"_id":"themes/yilia/README.md","hash":"8648a81b3ae08a4accd6b0541533e662511e6400","modified":1489391207261},{"_id":"themes/yilia/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1489391207407},{"_id":"themes/yilia/_config.yml","hash":"211a653c29a38ed507abc940c02cfcff52c1963b","modified":1489391207264},{"_id":"source/_posts/CSS制作气泡.md","hash":"9aaa835408cb61d707698cbfe9ae326993296a33","modified":1489391206843},{"_id":"source/essay/index.md","hash":"2e719e6418e692bf1f40332c967762c7a0c313b8","modified":1489391206898},{"_id":"source/_posts/JS闭包.md","hash":"18cdfe659c1978ee81513082b36f4fcf5dcb42ab","modified":1489391206849},{"_id":"source/_posts/css伪类.md","hash":"3ea695cdd62a5ac4282f0608c5abdb243a1bd525","modified":1489391206854},{"_id":"source/_posts/hello-world.md","hash":"ee52889d30e2660e2ffa12a8cda7872dd5d7b2fd","modified":1489391206863},{"_id":"source/_posts/css属性选择器.md","hash":"08da2c3c4c2e0da5ff0b46579e256d5a64babced","modified":1489391206858},{"_id":"source/_posts/js.md","hash":"3589f74a9692009aedd72ed6372dbcc60462ec8d","modified":1489391206870},{"_id":"source/_posts/js2.md","hash":"30384209b1a658885883f949624f0b607c5fb491","modified":1489391206882},{"_id":"source/_posts/page.md","hash":"7a84a6fb6ed002f3c3efe611ee1bf6cf916bc634","modified":1489391206888},{"_id":"source/_posts/js1.md","hash":"ee39513a0e12f28e85517683f54061f60646df13","modified":1489391206877},{"_id":"source/_posts/http.md","hash":"a1f666178bbb2d40d1ab196a2a038e14380400e2","modified":1489391206866},{"_id":"themes/yilia/languages/default.yml","hash":"f0a7a032b31555c9ec05a711e1ac19bb07724708","modified":1489391207270},{"_id":"source/_posts/如何用hexo搭建个人博客.md","hash":"31c6e3d552c38ec759772c710c8731ac64b01c4a","modified":1489391206895},{"_id":"themes/yilia/languages/de.yml","hash":"bc80f78f61c3d7af9652e6aa6fc3e4ff39b0c8d3","modified":1489391207268},{"_id":"source/_posts/利用css模拟滚动条.md","hash":"a3b48ae1ec8f19ddb2cbea667e0a26add0d66155","modified":1489391206892},{"_id":"themes/yilia/languages/fr-FR.yml","hash":"04b9a0d80d88d01e039e8077afe88f741e9620ba","modified":1489391207276},{"_id":"themes/yilia/languages/en.yml","hash":"a093e794aef63ec9e9e9ef490cf7e4474e45e59f","modified":1489391207273},{"_id":"themes/yilia/languages/ru.yml","hash":"62f84ea82a696060c481fc22d4742e6201bb9bdc","modified":1489391207279},{"_id":"themes/yilia/languages/zh-Hans.yml","hash":"d2336578e14bb880d152266981c2b17523fc8742","modified":1489391207282},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1489391207393},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"005559baa96b7bb34e1efe6b031829a95d58d5e0","modified":1489391207287},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1489391207392},{"_id":"themes/yilia/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1489391207393},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1489391207404},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1489391207402},{"_id":"themes/yilia/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1489391207401},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"5b29a383418cfdcf8d5c5719b4fc4608aaba6fe7","modified":1489391207300},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"3709af4e8f7e1196dbd1f9dea62fa440d4b47836","modified":1489391207297},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1489391207309},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"e2f36b1cdadac694b36533f7a0b4109b010d8444","modified":1489391207328},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1489391207329},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"420b94c78832456686ebd9831a5bfcb05365645a","modified":1489391207325},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1489391207341},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"2bbf5aad03f54055d9d7852e70ff7e6952a41f26","modified":1489391207337},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"b03e8424b4798d4887801afdfae457fbf6027838","modified":1489391207348},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"7be03a92dabeb2f94bf0e731d12a1c1146d736dd","modified":1489391207354},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"6a7a2a4960dabf9d7cd523573da7869eebf4b02d","modified":1489391207358},{"_id":"themes/yilia/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1489391207409},{"_id":"themes/yilia/source/css/_variables.styl","hash":"8b63ea3c7199524b9a1541075c6f8fb2c0d0ea3d","modified":1489391207454},{"_id":"themes/yilia/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489391207483},{"_id":"themes/yilia/source/css/style.styl","hash":"456e8cfe3b0b0371e81848ea9b0bc7ffd5360921","modified":1489391207481},{"_id":"themes/yilia/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489391207484},{"_id":"themes/yilia/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489391207485},{"_id":"themes/yilia/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489391207486},{"_id":"themes/yilia/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489391207487},{"_id":"themes/yilia/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489391207488},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1489391207498},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1489391207509},{"_id":"themes/yilia/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1489391207523},{"_id":"themes/yilia/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1489391207554},{"_id":"themes/yilia/source/js/main.js","hash":"e2633f282e377a4169649c9f17dc96036ad4fc64","modified":1489391207565},{"_id":"themes/yilia/source/js/mobile.js","hash":"387c047e661f04fbb5f5bfc4b2db617023e836ce","modified":1489391207574},{"_id":"themes/yilia/source/js/pc.js","hash":"a5397d34a04084ee089b4b1e26457ab46ecea63e","modified":1489391207582},{"_id":"themes/yilia/source/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1489391207525},{"_id":"themes/yilia/source/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1489391207526},{"_id":"themes/yilia/source/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1489391207527},{"_id":"themes/yilia/source/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1489391207528},{"_id":"themes/yilia/source/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1489391207529},{"_id":"themes/yilia/source/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1489391207530},{"_id":"themes/yilia/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1489391207530},{"_id":"themes/yilia/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1489391207531},{"_id":"themes/yilia/source/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1489391207532},{"_id":"themes/yilia/source/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1489391207533},{"_id":"themes/yilia/source/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1489391207534},{"_id":"themes/yilia/source/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1489391207535},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1489391207537},{"_id":"themes/yilia/source/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1489391207536},{"_id":"themes/yilia/source/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1489391207537},{"_id":"themes/yilia/source/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1489391207538},{"_id":"themes/yilia/source/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1489391207539},{"_id":"themes/yilia/source/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1489391207540},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1489391207364},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"06d8914b5aef73b5ec2cabb0105e275ff821b321","modified":1489391207367},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1489391207373},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"c115c282eebfb6b18612d2d8733272c270b03066","modified":1489391207376},{"_id":"themes/yilia/layout/_partial/post/share_addthis.ejs","hash":"4ab6cab2a975a4df8419448b33dec4724279d85c","modified":1489391207380},{"_id":"themes/yilia/layout/_partial/post/share_jia.ejs","hash":"590c89efb08ae77c71e1bf3a0c21ab3f12ff1225","modified":1489391207384},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"acf1b9d79ccec172881f9f0080e96667f4178885","modified":1489391207390},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1489391207391},{"_id":"themes/yilia/source/css/_partial/archive.styl","hash":"8b349f1605024dcdae054e04f02d71a2e84957c2","modified":1489391207412},{"_id":"themes/yilia/source/css/_partial/article.styl","hash":"872fc4e63509fef885c939e5fd70e6ed439beced","modified":1489391207415},{"_id":"themes/yilia/source/css/_partial/footer.styl","hash":"7ca837a4cc34db1c35f01baec85eb10ccc64ea86","modified":1489391207418},{"_id":"themes/yilia/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1489391207419},{"_id":"themes/yilia/source/css/_partial/highlight.styl","hash":"08d3205dde3235f3e6881126268e6c473f46a8ac","modified":1489391207424},{"_id":"themes/yilia/source/css/_partial/instagram.styl","hash":"8a7b07bf5ea2d3588c0019f722c245bb1a8696af","modified":1489391207427},{"_id":"themes/yilia/source/css/_partial/main.styl","hash":"c368f1533053d4cffdf0ad982603271400b08e33","modified":1489391207430},{"_id":"themes/yilia/source/css/_partial/mobile-slider.styl","hash":"e19c7fae6968ad3ea6cfc110900a991f9b5fce31","modified":1489391207433},{"_id":"themes/yilia/source/css/_partial/mobile.styl","hash":"3a03b04ef8ac305aa5dbf7b9db99cd9377d07383","modified":1489391207436},{"_id":"themes/yilia/source/css/_partial/page.styl","hash":"720b5b169bc28ccba3794efce9b7cd39f243dec7","modified":1489391207438},{"_id":"themes/yilia/source/css/_partial/scroll.styl","hash":"5539a38f9acd603d453a0ea0d8ce10893cf83d22","modified":1489391207441},{"_id":"themes/yilia/source/css/_partial/share.styl","hash":"22697b9a9877ab9f018364feb57aeea4a8313c9a","modified":1489391207444},{"_id":"themes/yilia/source/css/_partial/tagcloud.styl","hash":"af0115de5c6455f899a2e09225b50224982c039d","modified":1489391207447},{"_id":"themes/yilia/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1489391207450},{"_id":"themes/yilia/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1489391207452},{"_id":"themes/yilia/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1489391207453},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1489391207461},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1489391207470},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1489391207475},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1489391207478},{"_id":"themes/yilia/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489391207490},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1489391207491},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1489391207492},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1489391207493},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1489391207494},{"_id":"themes/yilia/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1489391207494},{"_id":"themes/yilia/source/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1489391207466},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1489391207403},{"_id":"themes/yilia/languages/zh-hk.yml","hash":"e702fc43556e54c396917bdf7c869d528742e28b","modified":1489391207285},{"_id":"themes/yilia/source/js/jquery.lazyload.js","hash":"9c34c37b4dca82386648d364da913153d1db902e","modified":1489391207563},{"_id":"public/2017/03/13/hello-world/index.html","hash":"874c1751fe8585b25e71ed0df7e18e9859423e5c","modified":1489393739243},{"_id":"public/essay/index.html","hash":"1806c37d6ed7bda30611d3a1e24e35c39cbcea53","modified":1489393739243},{"_id":"public/2016/08/11/http/index.html","hash":"69138e7d4a92d5c382fb1ea63a984397e2f81026","modified":1489393739243},{"_id":"public/2016/06/10/css伪类/index.html","hash":"ab4bd2011d755607f0491b2bb86918234677f0a0","modified":1489393739243},{"_id":"public/2016/05/14/js2/index.html","hash":"016827f6ff7b520dac9ed7b1e4272d1185f0b94f","modified":1489393739243},{"_id":"public/2016/05/12/js/index.html","hash":"2d788b783dd93bf4931cbd549c2b92e3e642059b","modified":1489393739244},{"_id":"public/archives/index.html","hash":"1514b178dfebbfcb35c33e8d1b113ccfd74b9696","modified":1489393739244},{"_id":"public/archives/page/2/index.html","hash":"038afcf0c5fb679dac38ed6c56d1f0641ab04322","modified":1489393739244},{"_id":"public/archives/2016/index.html","hash":"deaad031158340b06ff7b995cb45986a66b712c9","modified":1489393739244},{"_id":"public/archives/2016/page/2/index.html","hash":"67e22e13ba3f74bd41df6fecc0c01de5dfe33e6f","modified":1489393739244},{"_id":"public/archives/2016/03/index.html","hash":"d305571f241416ce5ee9c54fadbc8a2f9d786e1f","modified":1489393739244},{"_id":"public/archives/2016/05/index.html","hash":"89561b25efc6f613c5c53e0a0b03a4900131a8b7","modified":1489393739244},{"_id":"public/archives/2016/06/index.html","hash":"67d75438d4ae8fe7e9582b431045414bcd575e9e","modified":1489393739244},{"_id":"public/archives/2016/08/index.html","hash":"9573d76efd9ef32ec40c0d891dc341e1c2e5b5de","modified":1489393739244},{"_id":"public/archives/2017/index.html","hash":"506b315f0762bb263e25fdee67e50844d6326398","modified":1489393739245},{"_id":"public/archives/2017/03/index.html","hash":"f32afe3ecedd18fa78b557c32cf2fd41ccb94b14","modified":1489393739245},{"_id":"public/tags/css/index.html","hash":"c716e5faa4884bea4709872a2b4fe93fc58a1c56","modified":1489393739245},{"_id":"public/tags/js/index.html","hash":"8d7d59240499d712db54779ecc137946ccc0e107","modified":1489393739245},{"_id":"public/tags/面试/index.html","hash":"471a6c03d96f572c965799bbabb23a29e3a09851","modified":1489393739245},{"_id":"public/tags/html/index.html","hash":"a38b46d7914c0808070ecb56a9343f3e11fd9e38","modified":1489393739245},{"_id":"public/tags/http/index.html","hash":"21b6024f60e7b2278a827c288ba29492e8e2c327","modified":1489393739245},{"_id":"public/tags/浏览器/index.html","hash":"42e6b379028cd79cc1b4eed86a217a9071ae78c7","modified":1489393739245},{"_id":"public/tags/hexo/index.html","hash":"1379ff72105e2318fa2cbb768de3f5294ad1b5f0","modified":1489393739245},{"_id":"public/tags/博客/index.html","hash":"ada323915f2248df7164125aa23c0518e43f8c62","modified":1489393739245},{"_id":"public/tags/模拟滚动条/index.html","hash":"d2856c76b1ef9291ff293ea04896dfda257cc58a","modified":1489393739245},{"_id":"public/tags/摘抄/index.html","hash":"9d4d9da735a681deae9ecae775c3f1d707e8e2c1","modified":1489393739245},{"_id":"public/2016/08/10/page/index.html","hash":"34e099d2cfcb2291826ed30a9739fa63196093a4","modified":1489393739245},{"_id":"public/2016/06/05/JS闭包/index.html","hash":"fe83d3220093afa9e229881f5c9964b415ef1d2c","modified":1489393739245},{"_id":"public/2016/06/06/CSS制作气泡/index.html","hash":"f46bb82fe4fd45c2f9983e9be99070a21775326f","modified":1489393739245},{"_id":"public/2016/05/17/css属性选择器/index.html","hash":"df4a7c8a4cc776d9d573948b9cbc014e7b655b2a","modified":1489393739245},{"_id":"public/2016/05/13/js1/index.html","hash":"bbdfd52c72bc57a1475f2113d1b72dc38fe1986a","modified":1489393739245},{"_id":"public/2016/03/10/利用css模拟滚动条/index.html","hash":"b17edb2adefae212878ceb76a55fbf4c0301c27f","modified":1489393739245},{"_id":"public/2016/03/06/如何用hexo搭建个人博客/index.html","hash":"27ee4b9384bc024515ad774329ba017a0b0868b3","modified":1489393739246},{"_id":"public/index.html","hash":"d64ac6c0247da2647f8ea74fb45f3858d6149011","modified":1489393739246},{"_id":"public/page/2/index.html","hash":"1e94cb3f647c9377f469d20f02c1db6d7e1f2177","modified":1489393739246},{"_id":"public/CNAME","hash":"e7c389d4285bd0010a942e22856bc0673d4966a3","modified":1489393739260},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489393739260},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489393739260},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489393739260},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489393739260},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489393739260},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489393739260},{"_id":"public/img/delicious.png","hash":"9553a5f5189e4a953e04a58a49dbfa74b86b73dd","modified":1489393739260},{"_id":"public/img/douban.png","hash":"e2ade003ffadd5826ee66ec23901c2d6e8607e4e","modified":1489393739260},{"_id":"public/img/facebook.png","hash":"d19ad7a0903daf26817afd8753cd97e0cc714f54","modified":1489393739260},{"_id":"public/img/coderwall.png","hash":"fa84676c4d654e040e51fd34bfcd9f9348cd5331","modified":1489393739260},{"_id":"public/img/github.png","hash":"b84d03b32fa388dcbf149296ebd16dce6223d48d","modified":1489393739260},{"_id":"public/img/google.png","hash":"61a21fec7346fa3400b747ac9a201cf3d5bc013d","modified":1489393739260},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1489393739260},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1489393739260},{"_id":"public/img/linkedin.png","hash":"e203138fb53c257cb214e97f4e30091b9c568d2c","modified":1489393739260},{"_id":"public/img/mail.png","hash":"fca8199cc77fdbd700a45bf56d091c82f4a67fe7","modified":1489393739260},{"_id":"public/img/pinboard.png","hash":"0891fbb6d092fa012bf936019923383d84c6aeb0","modified":1489393739260},{"_id":"public/img/pinterest.png","hash":"9c72917f8779c083157c6ce7a5d62ed4874f0630","modified":1489393739261},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1489393739261},{"_id":"public/img/rss.png","hash":"430fd47340e75214c081abd05cd7410cf7c71b86","modified":1489393739261},{"_id":"public/img/stackoverflow.png","hash":"da5dfe9043055c95e479d49c78cd3b020de608f2","modified":1489393739261},{"_id":"public/img/twitter.png","hash":"14dbb8e62d056525253bc0de13acd1723da7a934","modified":1489393739261},{"_id":"public/img/weibo.png","hash":"280dae3fd38086158b4a1b57edb94c06b1a5014b","modified":1489393739261},{"_id":"public/css/fonts/fontawesome-webfont.svgz","hash":"4bfdd33ed702e32ae01399fcc2652377f78e7626","modified":1489393739261},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"3ce87b82c7a4ffdf65e96765c2ffda10b1a283c6","modified":1489393739261},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489393739261},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"cafc4ac5761a0a252d33dce4ea3952cf9a38d832","modified":1489393739261},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"1480b8101b02da9bc4c60341b5e185e63e585064","modified":1489393739262},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"ba13657479b46daecb6336bfe376f84cef3ae58b","modified":1489393742425},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1489393742437},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1489393742437},{"_id":"public/js/main.js","hash":"0640b68a76fab3c693b3cd1e4d04d14be1e53940","modified":1489393742438},{"_id":"public/js/pc.js","hash":"fdbc039fc9ffa70815b5fc4daaa587ae29693f10","modified":1489393742438},{"_id":"public/js/mobile.js","hash":"b68cc01d24e80973c48205f551da87f3f3427644","modified":1489393742438},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1489393742438},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489393742438},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1489393742438},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1489393742438},{"_id":"public/js/jquery.lazyload.js","hash":"c11a2e7b330d16d06feabd0a8477099adf9d6799","modified":1489393742438},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489393742438},{"_id":"public/css/style.css","hash":"10e9b93cf935a165020e48334a40b84b0f895401","modified":1489393742439},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1489393742439},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1489393742439},{"_id":"public/img/zhihu.png","hash":"a6d6ef65e9ac82e613a311810391ebb90d9b1c1d","modified":1489393742452}],"Category":[],"Data":[],"Page":[{"title":"毕业旅游计划事宜","date":"2016-03-12T15:03:30.000Z","_content":"## 毕业旅游的时间\n主要是为了记录一下之后想要去的毕业旅行，时间暂时不定，为期大约为1周左右，随性大约2人。持续待补充\n## 毕业旅行的地点（暂定）\n\n### 青岛\n* 青岛，地处山东半岛东南部沿海，胶东半岛东部，东、南濒临黄海，隔海与朝鲜半岛相望。\n* 有高铁直达，大约为7个小时左右\n\n### 成都\n* 成都位于四川盆地西部，成都平原腹地\n\n### 稻城\n* 稻城县位于中国四川省西南边缘，甘孜州南部。地处青藏高原东南部，横断山脉东侧。\n\n## 毕业旅行的预算","source":"essay/index.md","raw":"---\ntitle: 毕业旅游计划事宜\ndate: 2016-03-12 23:03:30\n---\n## 毕业旅游的时间\n主要是为了记录一下之后想要去的毕业旅行，时间暂时不定，为期大约为1周左右，随性大约2人。持续待补充\n## 毕业旅行的地点（暂定）\n\n### 青岛\n* 青岛，地处山东半岛东南部沿海，胶东半岛东部，东、南濒临黄海，隔海与朝鲜半岛相望。\n* 有高铁直达，大约为7个小时左右\n\n### 成都\n* 成都位于四川盆地西部，成都平原腹地\n\n### 稻城\n* 稻城县位于中国四川省西南边缘，甘孜州南部。地处青藏高原东南部，横断山脉东侧。\n\n## 毕业旅行的预算","updated":"2017-03-13T07:46:46.898Z","path":"essay/index.html","comments":1,"layout":"page","_id":"cj07ukqj90001zss38ae7x9q5","content":"<h2 id=\"毕业旅游的时间\"><a href=\"#毕业旅游的时间\" class=\"headerlink\" title=\"毕业旅游的时间\"></a>毕业旅游的时间</h2><p>主要是为了记录一下之后想要去的毕业旅行，时间暂时不定，为期大约为1周左右，随性大约2人。持续待补充</p>\n<h2 id=\"毕业旅行的地点（暂定）\"><a href=\"#毕业旅行的地点（暂定）\" class=\"headerlink\" title=\"毕业旅行的地点（暂定）\"></a>毕业旅行的地点（暂定）</h2><h3 id=\"青岛\"><a href=\"#青岛\" class=\"headerlink\" title=\"青岛\"></a>青岛</h3><ul>\n<li>青岛，地处山东半岛东南部沿海，胶东半岛东部，东、南濒临黄海，隔海与朝鲜半岛相望。</li>\n<li>有高铁直达，大约为7个小时左右</li>\n</ul>\n<h3 id=\"成都\"><a href=\"#成都\" class=\"headerlink\" title=\"成都\"></a>成都</h3><ul>\n<li>成都位于四川盆地西部，成都平原腹地</li>\n</ul>\n<h3 id=\"稻城\"><a href=\"#稻城\" class=\"headerlink\" title=\"稻城\"></a>稻城</h3><ul>\n<li>稻城县位于中国四川省西南边缘，甘孜州南部。地处青藏高原东南部，横断山脉东侧。</li>\n</ul>\n<h2 id=\"毕业旅行的预算\"><a href=\"#毕业旅行的预算\" class=\"headerlink\" title=\"毕业旅行的预算\"></a>毕业旅行的预算</h2>","excerpt":"","more":"<h2 id=\"毕业旅游的时间\"><a href=\"#毕业旅游的时间\" class=\"headerlink\" title=\"毕业旅游的时间\"></a>毕业旅游的时间</h2><p>主要是为了记录一下之后想要去的毕业旅行，时间暂时不定，为期大约为1周左右，随性大约2人。持续待补充</p>\n<h2 id=\"毕业旅行的地点（暂定）\"><a href=\"#毕业旅行的地点（暂定）\" class=\"headerlink\" title=\"毕业旅行的地点（暂定）\"></a>毕业旅行的地点（暂定）</h2><h3 id=\"青岛\"><a href=\"#青岛\" class=\"headerlink\" title=\"青岛\"></a>青岛</h3><ul>\n<li>青岛，地处山东半岛东南部沿海，胶东半岛东部，东、南濒临黄海，隔海与朝鲜半岛相望。</li>\n<li>有高铁直达，大约为7个小时左右</li>\n</ul>\n<h3 id=\"成都\"><a href=\"#成都\" class=\"headerlink\" title=\"成都\"></a>成都</h3><ul>\n<li>成都位于四川盆地西部，成都平原腹地</li>\n</ul>\n<h3 id=\"稻城\"><a href=\"#稻城\" class=\"headerlink\" title=\"稻城\"></a>稻城</h3><ul>\n<li>稻城县位于中国四川省西南边缘，甘孜州南部。地处青藏高原东南部，横断山脉东侧。</li>\n</ul>\n<h2 id=\"毕业旅行的预算\"><a href=\"#毕业旅行的预算\" class=\"headerlink\" title=\"毕业旅行的预算\"></a>毕业旅行的预算</h2>"}],"Post":[{"title":"CSS制作气泡","date":"2016-06-06T14:39:06.000Z","_content":"\n\n## 制作气泡的效果图\n ![运行截图1](http://7xrkml.com1.z0.glb.clouddn.com/qipao1.png)\n\n## 制作方法说明\n首先，由于兼容的问题，没有使用伪类，可以使用伪类优化代码，首先我们需要知道一个三角形怎么完成。\n\n### border属性说明\n首先我们来玩一下border这个属性，当我们把一个div的border-color设为不同值的时候，可以看到四边都成了一个梯形。\n\n```\n\t#test{\n\t\twidth:50px; \n\t\theight:50px; \n\t\tborder-width:50px; \n\t\tborder-style:solid; \n\t\tborder-color:#00ff00 #ff00ff #ff0000 #0000ff;\n\t}\n```\n效果图如下：\n![运行截图2](http://7xrkml.com1.z0.glb.clouddn.com/tixing.png)\n\n我们继续玩这个属性，可以想象，如果这个div没有宽高，那么应当是四个三角形。\n```\n\t#test{\n\t\twidth:0; \n\t\theight:0;\n\t\tborder-width:50px; \n\t\tborder-style:solid; \n\t\tborder-color:#00ff00 #ff00ff #ff0000 #0000ff;\n\t}\n```\n![运行截图3](http://7xrkml.com1.z0.glb.clouddn.com/4-sanjiaoxing.png)\n结果果然如我们所料，那么可以想象，假如只有一条边有颜色，其余的边都为透明，就是一个三角形了。\n```\n\t#test{\n\t\t width:0; \n\t\t height:0; \n\t\t border-width:50px; \n\t\t border-style:solid; \n\t\t border-color:#ff00ff transparent transparent; \n\t}\n```\n![运行截图4](http://7xrkml.com1.z0.glb.clouddn.com/1-sanjiaoxing.png)\n一个三角形已经画好了，而我们最终效果是一个镂空的三角形，所以，我们只要在叠加一个与背景色相同发的三角形即可。\n\n### 兼容IE6\n\n在各大的主流浏览器中，测试上上诉的代码的，结果发现，IE6下存在两个问题\n\n1. 上下边能形成三角形，左右两边仍然还是梯形\n>* 解决方法：font-size和line-height都设为0的时候，div的四边在IE6下都能形成完美的三角形\n\n2. IE6下transparent无效！其他三边被设置成默认的黑色了。\n>* 解决方法：把border-style设置为dashed后，IE6下其他三边就能透明了！\n\n###  最终代码实现\n为了更方便维护，代码结构有所改动。\ncss如下：\n```\n\t.tag{ \n\t\twidth:300px; \n\t\tpadding: 20px;\n\t\tborder:5px solid #64A7D0; \n\t\tposition:relative; \n\t\tbackground-color:#FFF;\n\t}\n\t.arrow{ \n\t\tposition:absolute; \n\t\twidth:40px; \n\t\theight:40px; \n\t\tbottom:-40px; \n\t\tleft:100px; \n\t}\n\t.arrow *{ \n\t\tdisplay:block; \n\t\tborder-width:20px; \n\t\tposition:absolute; \n\t\tborder-style:solid dashed dashed dashed; \n\t\tfont-size:0; \n\t\tline-height:0; \n\t}\n\t.arrow em{\n\t\tborder-color:#64A7D0 transparent transparent;\n\t}\n\t.arrow span{\n\t\tborder-color:#FFF transparent transparent; top:-7px;\n\t}\n```\nhtml:\n```\n\t<div class=\"tag\">\n \t\t<div class=\"arrow\">\n     \t\t<em></em><span></span>\n    \t</div>\n    \tCSS气泡框实现\n\t</div>\n```\n### 思考题\n![运行截图5](http://7xrkml.com1.z0.glb.clouddn.com/qipao2.png)\n那么如图所示的不规则三角形该怎么制作呢，也很简单，只需要稍微改动代码即可。页面结构不变。\ncss如下：\n```\n.tag{ \n\t\twidth:300px;\n\t \theight:100px;\n\t \tposition:relative; \n\t \tbackground-color:#64A7D0;\n\t }\n\t.arrow{ \n\t\tposition:absolute; \n\t\twidth:70px; \n\t\theight:60px; \n\t\tleft:-70px; \n\t\tbottom:10px;\n\t}\n\t.arrow *{ \n\t\tdisplay:block; \n\t\tposition:absolute; \n\t\tborder-style:dashed solid solid dashed; \n\t\tfont-size:0; \n\t\tline-height:0; \n\t}\n\t.arrow em{\n\t\tborder-color:transparent #64A7D0 #64A7D0 transparent; \n\t\tborder-width:30px 35px;\n\t}\n\n\t.arrow span{ \n\t\tborder-width:20px 35px;\n\t\tborder-color:transparent #FFF #FFF transparent; \n\t\tbottom:0;\n\t}\n\n```\n### 伪类制作\n\n为了减少结构的冗余，我们可以使用CSS3的伪类来达到一样的效果\n```\n.tag{\n    width:300px;\n    height:100px;\n    border:5px solid #09F;\n    position:relative;\n    background-color:#FFF;\n}\n.tag:before,.tag:after{\n    content:\"\";display:block;\n    border-width:20px;\n    position:absolute; bottom:-40px;\n    left:100px;\n    border-style:solid dashed dashed;\n    border-color:#09F transparent transparent;\n    font-size:0;\n    line-height:0;\n}\n.tag:after{\n    bottom:-33px;\n    border-color:#FFF transparent transparent;\n}\n```","source":"_posts/CSS制作气泡.md","raw":"---\ntitle: CSS制作气泡\ndate: 2016-06-06 22:39:06\ntags: [css]\n---\n\n\n## 制作气泡的效果图\n ![运行截图1](http://7xrkml.com1.z0.glb.clouddn.com/qipao1.png)\n\n## 制作方法说明\n首先，由于兼容的问题，没有使用伪类，可以使用伪类优化代码，首先我们需要知道一个三角形怎么完成。\n\n### border属性说明\n首先我们来玩一下border这个属性，当我们把一个div的border-color设为不同值的时候，可以看到四边都成了一个梯形。\n\n```\n\t#test{\n\t\twidth:50px; \n\t\theight:50px; \n\t\tborder-width:50px; \n\t\tborder-style:solid; \n\t\tborder-color:#00ff00 #ff00ff #ff0000 #0000ff;\n\t}\n```\n效果图如下：\n![运行截图2](http://7xrkml.com1.z0.glb.clouddn.com/tixing.png)\n\n我们继续玩这个属性，可以想象，如果这个div没有宽高，那么应当是四个三角形。\n```\n\t#test{\n\t\twidth:0; \n\t\theight:0;\n\t\tborder-width:50px; \n\t\tborder-style:solid; \n\t\tborder-color:#00ff00 #ff00ff #ff0000 #0000ff;\n\t}\n```\n![运行截图3](http://7xrkml.com1.z0.glb.clouddn.com/4-sanjiaoxing.png)\n结果果然如我们所料，那么可以想象，假如只有一条边有颜色，其余的边都为透明，就是一个三角形了。\n```\n\t#test{\n\t\t width:0; \n\t\t height:0; \n\t\t border-width:50px; \n\t\t border-style:solid; \n\t\t border-color:#ff00ff transparent transparent; \n\t}\n```\n![运行截图4](http://7xrkml.com1.z0.glb.clouddn.com/1-sanjiaoxing.png)\n一个三角形已经画好了，而我们最终效果是一个镂空的三角形，所以，我们只要在叠加一个与背景色相同发的三角形即可。\n\n### 兼容IE6\n\n在各大的主流浏览器中，测试上上诉的代码的，结果发现，IE6下存在两个问题\n\n1. 上下边能形成三角形，左右两边仍然还是梯形\n>* 解决方法：font-size和line-height都设为0的时候，div的四边在IE6下都能形成完美的三角形\n\n2. IE6下transparent无效！其他三边被设置成默认的黑色了。\n>* 解决方法：把border-style设置为dashed后，IE6下其他三边就能透明了！\n\n###  最终代码实现\n为了更方便维护，代码结构有所改动。\ncss如下：\n```\n\t.tag{ \n\t\twidth:300px; \n\t\tpadding: 20px;\n\t\tborder:5px solid #64A7D0; \n\t\tposition:relative; \n\t\tbackground-color:#FFF;\n\t}\n\t.arrow{ \n\t\tposition:absolute; \n\t\twidth:40px; \n\t\theight:40px; \n\t\tbottom:-40px; \n\t\tleft:100px; \n\t}\n\t.arrow *{ \n\t\tdisplay:block; \n\t\tborder-width:20px; \n\t\tposition:absolute; \n\t\tborder-style:solid dashed dashed dashed; \n\t\tfont-size:0; \n\t\tline-height:0; \n\t}\n\t.arrow em{\n\t\tborder-color:#64A7D0 transparent transparent;\n\t}\n\t.arrow span{\n\t\tborder-color:#FFF transparent transparent; top:-7px;\n\t}\n```\nhtml:\n```\n\t<div class=\"tag\">\n \t\t<div class=\"arrow\">\n     \t\t<em></em><span></span>\n    \t</div>\n    \tCSS气泡框实现\n\t</div>\n```\n### 思考题\n![运行截图5](http://7xrkml.com1.z0.glb.clouddn.com/qipao2.png)\n那么如图所示的不规则三角形该怎么制作呢，也很简单，只需要稍微改动代码即可。页面结构不变。\ncss如下：\n```\n.tag{ \n\t\twidth:300px;\n\t \theight:100px;\n\t \tposition:relative; \n\t \tbackground-color:#64A7D0;\n\t }\n\t.arrow{ \n\t\tposition:absolute; \n\t\twidth:70px; \n\t\theight:60px; \n\t\tleft:-70px; \n\t\tbottom:10px;\n\t}\n\t.arrow *{ \n\t\tdisplay:block; \n\t\tposition:absolute; \n\t\tborder-style:dashed solid solid dashed; \n\t\tfont-size:0; \n\t\tline-height:0; \n\t}\n\t.arrow em{\n\t\tborder-color:transparent #64A7D0 #64A7D0 transparent; \n\t\tborder-width:30px 35px;\n\t}\n\n\t.arrow span{ \n\t\tborder-width:20px 35px;\n\t\tborder-color:transparent #FFF #FFF transparent; \n\t\tbottom:0;\n\t}\n\n```\n### 伪类制作\n\n为了减少结构的冗余，我们可以使用CSS3的伪类来达到一样的效果\n```\n.tag{\n    width:300px;\n    height:100px;\n    border:5px solid #09F;\n    position:relative;\n    background-color:#FFF;\n}\n.tag:before,.tag:after{\n    content:\"\";display:block;\n    border-width:20px;\n    position:absolute; bottom:-40px;\n    left:100px;\n    border-style:solid dashed dashed;\n    border-color:#09F transparent transparent;\n    font-size:0;\n    line-height:0;\n}\n.tag:after{\n    bottom:-33px;\n    border-color:#FFF transparent transparent;\n}\n```","slug":"CSS制作气泡","published":1,"updated":"2017-03-13T07:46:46.843Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqj40000zss3l1rycfnv","content":"<h2 id=\"制作气泡的效果图\"><a href=\"#制作气泡的效果图\" class=\"headerlink\" title=\"制作气泡的效果图\"></a>制作气泡的效果图</h2><p> <img src=\"http://7xrkml.com1.z0.glb.clouddn.com/qipao1.png\" alt=\"运行截图1\"></p>\n<h2 id=\"制作方法说明\"><a href=\"#制作方法说明\" class=\"headerlink\" title=\"制作方法说明\"></a>制作方法说明</h2><p>首先，由于兼容的问题，没有使用伪类，可以使用伪类优化代码，首先我们需要知道一个三角形怎么完成。</p>\n<h3 id=\"border属性说明\"><a href=\"#border属性说明\" class=\"headerlink\" title=\"border属性说明\"></a>border属性说明</h3><p>首先我们来玩一下border这个属性，当我们把一个div的border-color设为不同值的时候，可以看到四边都成了一个梯形。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#test&#123;</div><div class=\"line\">\twidth:50px; </div><div class=\"line\">\theight:50px; </div><div class=\"line\">\tborder-width:50px; </div><div class=\"line\">\tborder-style:solid; </div><div class=\"line\">\tborder-color:#00ff00 #ff00ff #ff0000 #0000ff;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果图如下：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/tixing.png\" alt=\"运行截图2\"></p>\n<p>我们继续玩这个属性，可以想象，如果这个div没有宽高，那么应当是四个三角形。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#test&#123;</div><div class=\"line\">\twidth:0; </div><div class=\"line\">\theight:0;</div><div class=\"line\">\tborder-width:50px; </div><div class=\"line\">\tborder-style:solid; </div><div class=\"line\">\tborder-color:#00ff00 #ff00ff #ff0000 #0000ff;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/4-sanjiaoxing.png\" alt=\"运行截图3\"><br>结果果然如我们所料，那么可以想象，假如只有一条边有颜色，其余的边都为透明，就是一个三角形了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#test&#123;</div><div class=\"line\">\t width:0; </div><div class=\"line\">\t height:0; </div><div class=\"line\">\t border-width:50px; </div><div class=\"line\">\t border-style:solid; </div><div class=\"line\">\t border-color:#ff00ff transparent transparent; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/1-sanjiaoxing.png\" alt=\"运行截图4\"><br>一个三角形已经画好了，而我们最终效果是一个镂空的三角形，所以，我们只要在叠加一个与背景色相同发的三角形即可。</p>\n<h3 id=\"兼容IE6\"><a href=\"#兼容IE6\" class=\"headerlink\" title=\"兼容IE6\"></a>兼容IE6</h3><p>在各大的主流浏览器中，测试上上诉的代码的，结果发现，IE6下存在两个问题</p>\n<ol>\n<li><p>上下边能形成三角形，左右两边仍然还是梯形</p>\n<blockquote>\n<ul>\n<li>解决方法：font-size和line-height都设为0的时候，div的四边在IE6下都能形成完美的三角形</li>\n</ul>\n</blockquote>\n</li>\n<li><p>IE6下transparent无效！其他三边被设置成默认的黑色了。</p>\n<blockquote>\n<ul>\n<li>解决方法：把border-style设置为dashed后，IE6下其他三边就能透明了！</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"最终代码实现\"><a href=\"#最终代码实现\" class=\"headerlink\" title=\"最终代码实现\"></a>最终代码实现</h3><p>为了更方便维护，代码结构有所改动。<br>css如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">.tag&#123; </div><div class=\"line\">\twidth:300px; </div><div class=\"line\">\tpadding: 20px;</div><div class=\"line\">\tborder:5px solid #64A7D0; </div><div class=\"line\">\tposition:relative; </div><div class=\"line\">\tbackground-color:#FFF;</div><div class=\"line\">&#125;</div><div class=\"line\">.arrow&#123; </div><div class=\"line\">\tposition:absolute; </div><div class=\"line\">\twidth:40px; </div><div class=\"line\">\theight:40px; </div><div class=\"line\">\tbottom:-40px; </div><div class=\"line\">\tleft:100px; </div><div class=\"line\">&#125;</div><div class=\"line\">.arrow *&#123; </div><div class=\"line\">\tdisplay:block; </div><div class=\"line\">\tborder-width:20px; </div><div class=\"line\">\tposition:absolute; </div><div class=\"line\">\tborder-style:solid dashed dashed dashed; </div><div class=\"line\">\tfont-size:0; </div><div class=\"line\">\tline-height:0; </div><div class=\"line\">&#125;</div><div class=\"line\">.arrow em&#123;</div><div class=\"line\">\tborder-color:#64A7D0 transparent transparent;</div><div class=\"line\">&#125;</div><div class=\"line\">.arrow span&#123;</div><div class=\"line\">\tborder-color:#FFF transparent transparent; top:-7px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>html:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;tag&quot;&gt;</div><div class=\"line\">\t\t&lt;div class=&quot;arrow&quot;&gt;</div><div class=\"line\">    \t\t&lt;em&gt;&lt;/em&gt;&lt;span&gt;&lt;/span&gt;</div><div class=\"line\">   \t&lt;/div&gt;</div><div class=\"line\">   \tCSS气泡框实现</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h3><p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/qipao2.png\" alt=\"运行截图5\"><br>那么如图所示的不规则三角形该怎么制作呢，也很简单，只需要稍微改动代码即可。页面结构不变。<br>css如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">.tag&#123; </div><div class=\"line\">\t\twidth:300px;</div><div class=\"line\">\t \theight:100px;</div><div class=\"line\">\t \tposition:relative; </div><div class=\"line\">\t \tbackground-color:#64A7D0;</div><div class=\"line\">\t &#125;</div><div class=\"line\">\t.arrow&#123; </div><div class=\"line\">\t\tposition:absolute; </div><div class=\"line\">\t\twidth:70px; </div><div class=\"line\">\t\theight:60px; </div><div class=\"line\">\t\tleft:-70px; </div><div class=\"line\">\t\tbottom:10px;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.arrow *&#123; </div><div class=\"line\">\t\tdisplay:block; </div><div class=\"line\">\t\tposition:absolute; </div><div class=\"line\">\t\tborder-style:dashed solid solid dashed; </div><div class=\"line\">\t\tfont-size:0; </div><div class=\"line\">\t\tline-height:0; </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.arrow em&#123;</div><div class=\"line\">\t\tborder-color:transparent #64A7D0 #64A7D0 transparent; </div><div class=\"line\">\t\tborder-width:30px 35px;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.arrow span&#123; </div><div class=\"line\">\t\tborder-width:20px 35px;</div><div class=\"line\">\t\tborder-color:transparent #FFF #FFF transparent; </div><div class=\"line\">\t\tbottom:0;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"伪类制作\"><a href=\"#伪类制作\" class=\"headerlink\" title=\"伪类制作\"></a>伪类制作</h3><p>为了减少结构的冗余，我们可以使用CSS3的伪类来达到一样的效果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">.tag&#123;</div><div class=\"line\">    width:300px;</div><div class=\"line\">    height:100px;</div><div class=\"line\">    border:5px solid #09F;</div><div class=\"line\">    position:relative;</div><div class=\"line\">    background-color:#FFF;</div><div class=\"line\">&#125;</div><div class=\"line\">.tag:before,.tag:after&#123;</div><div class=\"line\">    content:&quot;&quot;;display:block;</div><div class=\"line\">    border-width:20px;</div><div class=\"line\">    position:absolute; bottom:-40px;</div><div class=\"line\">    left:100px;</div><div class=\"line\">    border-style:solid dashed dashed;</div><div class=\"line\">    border-color:#09F transparent transparent;</div><div class=\"line\">    font-size:0;</div><div class=\"line\">    line-height:0;</div><div class=\"line\">&#125;</div><div class=\"line\">.tag:after&#123;</div><div class=\"line\">    bottom:-33px;</div><div class=\"line\">    border-color:#FFF transparent transparent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"制作气泡的效果图\"><a href=\"#制作气泡的效果图\" class=\"headerlink\" title=\"制作气泡的效果图\"></a>制作气泡的效果图</h2><p> <img src=\"http://7xrkml.com1.z0.glb.clouddn.com/qipao1.png\" alt=\"运行截图1\"></p>\n<h2 id=\"制作方法说明\"><a href=\"#制作方法说明\" class=\"headerlink\" title=\"制作方法说明\"></a>制作方法说明</h2><p>首先，由于兼容的问题，没有使用伪类，可以使用伪类优化代码，首先我们需要知道一个三角形怎么完成。</p>\n<h3 id=\"border属性说明\"><a href=\"#border属性说明\" class=\"headerlink\" title=\"border属性说明\"></a>border属性说明</h3><p>首先我们来玩一下border这个属性，当我们把一个div的border-color设为不同值的时候，可以看到四边都成了一个梯形。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#test&#123;</div><div class=\"line\">\twidth:50px; </div><div class=\"line\">\theight:50px; </div><div class=\"line\">\tborder-width:50px; </div><div class=\"line\">\tborder-style:solid; </div><div class=\"line\">\tborder-color:#00ff00 #ff00ff #ff0000 #0000ff;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>效果图如下：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/tixing.png\" alt=\"运行截图2\"></p>\n<p>我们继续玩这个属性，可以想象，如果这个div没有宽高，那么应当是四个三角形。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#test&#123;</div><div class=\"line\">\twidth:0; </div><div class=\"line\">\theight:0;</div><div class=\"line\">\tborder-width:50px; </div><div class=\"line\">\tborder-style:solid; </div><div class=\"line\">\tborder-color:#00ff00 #ff00ff #ff0000 #0000ff;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/4-sanjiaoxing.png\" alt=\"运行截图3\"><br>结果果然如我们所料，那么可以想象，假如只有一条边有颜色，其余的边都为透明，就是一个三角形了。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">#test&#123;</div><div class=\"line\">\t width:0; </div><div class=\"line\">\t height:0; </div><div class=\"line\">\t border-width:50px; </div><div class=\"line\">\t border-style:solid; </div><div class=\"line\">\t border-color:#ff00ff transparent transparent; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/1-sanjiaoxing.png\" alt=\"运行截图4\"><br>一个三角形已经画好了，而我们最终效果是一个镂空的三角形，所以，我们只要在叠加一个与背景色相同发的三角形即可。</p>\n<h3 id=\"兼容IE6\"><a href=\"#兼容IE6\" class=\"headerlink\" title=\"兼容IE6\"></a>兼容IE6</h3><p>在各大的主流浏览器中，测试上上诉的代码的，结果发现，IE6下存在两个问题</p>\n<ol>\n<li><p>上下边能形成三角形，左右两边仍然还是梯形</p>\n<blockquote>\n<ul>\n<li>解决方法：font-size和line-height都设为0的时候，div的四边在IE6下都能形成完美的三角形</li>\n</ul>\n</blockquote>\n</li>\n<li><p>IE6下transparent无效！其他三边被设置成默认的黑色了。</p>\n<blockquote>\n<ul>\n<li>解决方法：把border-style设置为dashed后，IE6下其他三边就能透明了！</li>\n</ul>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"最终代码实现\"><a href=\"#最终代码实现\" class=\"headerlink\" title=\"最终代码实现\"></a>最终代码实现</h3><p>为了更方便维护，代码结构有所改动。<br>css如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">.tag&#123; </div><div class=\"line\">\twidth:300px; </div><div class=\"line\">\tpadding: 20px;</div><div class=\"line\">\tborder:5px solid #64A7D0; </div><div class=\"line\">\tposition:relative; </div><div class=\"line\">\tbackground-color:#FFF;</div><div class=\"line\">&#125;</div><div class=\"line\">.arrow&#123; </div><div class=\"line\">\tposition:absolute; </div><div class=\"line\">\twidth:40px; </div><div class=\"line\">\theight:40px; </div><div class=\"line\">\tbottom:-40px; </div><div class=\"line\">\tleft:100px; </div><div class=\"line\">&#125;</div><div class=\"line\">.arrow *&#123; </div><div class=\"line\">\tdisplay:block; </div><div class=\"line\">\tborder-width:20px; </div><div class=\"line\">\tposition:absolute; </div><div class=\"line\">\tborder-style:solid dashed dashed dashed; </div><div class=\"line\">\tfont-size:0; </div><div class=\"line\">\tline-height:0; </div><div class=\"line\">&#125;</div><div class=\"line\">.arrow em&#123;</div><div class=\"line\">\tborder-color:#64A7D0 transparent transparent;</div><div class=\"line\">&#125;</div><div class=\"line\">.arrow span&#123;</div><div class=\"line\">\tborder-color:#FFF transparent transparent; top:-7px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>html:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;div class=&quot;tag&quot;&gt;</div><div class=\"line\">\t\t&lt;div class=&quot;arrow&quot;&gt;</div><div class=\"line\">    \t\t&lt;em&gt;&lt;/em&gt;&lt;span&gt;&lt;/span&gt;</div><div class=\"line\">   \t&lt;/div&gt;</div><div class=\"line\">   \tCSS气泡框实现</div><div class=\"line\">&lt;/div&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"思考题\"><a href=\"#思考题\" class=\"headerlink\" title=\"思考题\"></a>思考题</h3><p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/qipao2.png\" alt=\"运行截图5\"><br>那么如图所示的不规则三角形该怎么制作呢，也很简单，只需要稍微改动代码即可。页面结构不变。<br>css如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">.tag&#123; </div><div class=\"line\">\t\twidth:300px;</div><div class=\"line\">\t \theight:100px;</div><div class=\"line\">\t \tposition:relative; </div><div class=\"line\">\t \tbackground-color:#64A7D0;</div><div class=\"line\">\t &#125;</div><div class=\"line\">\t.arrow&#123; </div><div class=\"line\">\t\tposition:absolute; </div><div class=\"line\">\t\twidth:70px; </div><div class=\"line\">\t\theight:60px; </div><div class=\"line\">\t\tleft:-70px; </div><div class=\"line\">\t\tbottom:10px;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.arrow *&#123; </div><div class=\"line\">\t\tdisplay:block; </div><div class=\"line\">\t\tposition:absolute; </div><div class=\"line\">\t\tborder-style:dashed solid solid dashed; </div><div class=\"line\">\t\tfont-size:0; </div><div class=\"line\">\t\tline-height:0; </div><div class=\"line\">\t&#125;</div><div class=\"line\">\t.arrow em&#123;</div><div class=\"line\">\t\tborder-color:transparent #64A7D0 #64A7D0 transparent; </div><div class=\"line\">\t\tborder-width:30px 35px;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t.arrow span&#123; </div><div class=\"line\">\t\tborder-width:20px 35px;</div><div class=\"line\">\t\tborder-color:transparent #FFF #FFF transparent; </div><div class=\"line\">\t\tbottom:0;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"伪类制作\"><a href=\"#伪类制作\" class=\"headerlink\" title=\"伪类制作\"></a>伪类制作</h3><p>为了减少结构的冗余，我们可以使用CSS3的伪类来达到一样的效果<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">.tag&#123;</div><div class=\"line\">    width:300px;</div><div class=\"line\">    height:100px;</div><div class=\"line\">    border:5px solid #09F;</div><div class=\"line\">    position:relative;</div><div class=\"line\">    background-color:#FFF;</div><div class=\"line\">&#125;</div><div class=\"line\">.tag:before,.tag:after&#123;</div><div class=\"line\">    content:&quot;&quot;;display:block;</div><div class=\"line\">    border-width:20px;</div><div class=\"line\">    position:absolute; bottom:-40px;</div><div class=\"line\">    left:100px;</div><div class=\"line\">    border-style:solid dashed dashed;</div><div class=\"line\">    border-color:#09F transparent transparent;</div><div class=\"line\">    font-size:0;</div><div class=\"line\">    line-height:0;</div><div class=\"line\">&#125;</div><div class=\"line\">.tag:after&#123;</div><div class=\"line\">    bottom:-33px;</div><div class=\"line\">    border-color:#FFF transparent transparent;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n"},{"title":"JS闭包","date":"2016-06-05T14:33:46.000Z","_content":"\n## 闭包的概念\n官方”的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因此这些变量也是该表达式的一部分。\n这句话非常的难懂，详细的说，所谓“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层函数体中的临时变量。\n这使得只要目标 对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目 标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。\n即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新 的值，和上次那次调用的是各自独立的。\n\n## 我的理解和使用\n我的理解是，闭包就是能够读取其他函数内部变量的函数。我使用的范围，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。\n\n## 作用域\n变量的作用域无非就是两种：全局变量和局部变量。\nJavascript语言的特殊之处，就在于函数内部可以直接读取全局变量。\n\n```javascript\n\tvar n=999;\n\tfunction f1(){\n　　　\talert(n);\n　　}\n　　f1(); // 999\n```\n另一方面，在函数外部自然无法读取函数内的局部变量。\n```javascript\n　　function f1(){\n　　　　var n=999;\n　　}\n　　alert(n); // error\n```\n## 使用闭包的注意点\n\n>* 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n>* 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n## 深入理解\n\n```javascript\nfunction a() { \n \tvar i = 0; \n \tfunction b() {\n\t\t alert(++i);\n\t } \n \treturn b;\n}\nvar c = a();\nc();\n```\n我们需要引入另外几个概念：函数的执行环境(excution context)、活动对象(call object)、作用域(scope)、作用域链(scope chain)。\n 我们以函数a从定义到执行的过程为例阐述这几个概念。\n1. 当定义函数a的时候，js解释器会将函数a的作用域链(scope chain)设置为定义a时a所在的“环境”，如果a是一个全局函数，则scope chain中只有window对象。\n2. 当执行函数a的时候，a会进入相应的执行环境(excution context)。\n3. 在创建执行环境的过程中，首先会为a添加一个scope属性，即a的作用域，其值就为第1步中的scope chain。即a.scope=a的作用域链。\n4. 然后执行环境会创建一个活动对象(call object)。活动对象也是一个拥有属性的对象，但它不具有原型而且不能通过JavaScript代码直接访问。创建完活动对象后，把活动对象添加到a的作用域链的最顶端。此时a的作用域链包含了两个对象：a的活动对象和window对象。\n5. 下一步是在活动对象上添加一个arguments属性，它保存着调用函数a时所传递的参数。\n6. 最后把所有函数a的形参和内部的函数b的引用也添加到a的活动对象上。在这一步中，完成了函数b的的定义，因此如同第3步，函数b的作用域链被设置为b所被定义的环境，即a的作用域。\n\n到此，整个函数a从定义到执行的步骤就完成了。此时a返回函数b的引用给c，又函数b的作用域链包含了对函数a的活动对象的引用，也就是说b可以访问到a中定义的所有变量和函数。函数b被c引用，函数b又依赖函数a，因此函数a在返回后不会被GC回收。\n\n## 变量搜索顺序\n1. 先搜索自身的活动对象，如果存在则返回，如果不存在将继续搜索函数a的活动对象，依次查找，直到找到为止。\n2. 如果函数b存在prototype原型对象，则在查找完自身的活动对象后先查找自身的原型对象，再继续查找。这就是Javascript中的变量查找机制。\n3. 如果整个作用域链上都无法找到，则返回undefined。\n\n## 常用的用法\n\n我们在使用for循环时，例如绑定点击事件，常常只能取到最后一个元素，这时我们要用闭包来解决。举例：\n```javascript\nvar myul = document.getElementsByTagName(\"ul\")[0];\nvar list = myul.getElementsByTagName(\"li\");\nfunction foo(){\n  for(var i = 0, len = list.length; i < len; i++){\n    var that = list[i];\n    list[i].onclick = (function(k){\n      var info = that.innerHTML;\n      return function(){\n        alert(k + \"----\" + info);\n      };\n    })(i);\n  }\n}\nfoo();\n```","source":"_posts/JS闭包.md","raw":"---\ntitle: JS闭包\ndate: 2016-06-05 22:33:46\ntags: [js]\n---\n\n## 闭包的概念\n官方”的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因此这些变量也是该表达式的一部分。\n这句话非常的难懂，详细的说，所谓“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层函数体中的临时变量。\n这使得只要目标 对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目 标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。\n即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新 的值，和上次那次调用的是各自独立的。\n\n## 我的理解和使用\n我的理解是，闭包就是能够读取其他函数内部变量的函数。我使用的范围，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。\n\n## 作用域\n变量的作用域无非就是两种：全局变量和局部变量。\nJavascript语言的特殊之处，就在于函数内部可以直接读取全局变量。\n\n```javascript\n\tvar n=999;\n\tfunction f1(){\n　　　\talert(n);\n　　}\n　　f1(); // 999\n```\n另一方面，在函数外部自然无法读取函数内的局部变量。\n```javascript\n　　function f1(){\n　　　　var n=999;\n　　}\n　　alert(n); // error\n```\n## 使用闭包的注意点\n\n>* 由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。\n>* 闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。\n\n## 深入理解\n\n```javascript\nfunction a() { \n \tvar i = 0; \n \tfunction b() {\n\t\t alert(++i);\n\t } \n \treturn b;\n}\nvar c = a();\nc();\n```\n我们需要引入另外几个概念：函数的执行环境(excution context)、活动对象(call object)、作用域(scope)、作用域链(scope chain)。\n 我们以函数a从定义到执行的过程为例阐述这几个概念。\n1. 当定义函数a的时候，js解释器会将函数a的作用域链(scope chain)设置为定义a时a所在的“环境”，如果a是一个全局函数，则scope chain中只有window对象。\n2. 当执行函数a的时候，a会进入相应的执行环境(excution context)。\n3. 在创建执行环境的过程中，首先会为a添加一个scope属性，即a的作用域，其值就为第1步中的scope chain。即a.scope=a的作用域链。\n4. 然后执行环境会创建一个活动对象(call object)。活动对象也是一个拥有属性的对象，但它不具有原型而且不能通过JavaScript代码直接访问。创建完活动对象后，把活动对象添加到a的作用域链的最顶端。此时a的作用域链包含了两个对象：a的活动对象和window对象。\n5. 下一步是在活动对象上添加一个arguments属性，它保存着调用函数a时所传递的参数。\n6. 最后把所有函数a的形参和内部的函数b的引用也添加到a的活动对象上。在这一步中，完成了函数b的的定义，因此如同第3步，函数b的作用域链被设置为b所被定义的环境，即a的作用域。\n\n到此，整个函数a从定义到执行的步骤就完成了。此时a返回函数b的引用给c，又函数b的作用域链包含了对函数a的活动对象的引用，也就是说b可以访问到a中定义的所有变量和函数。函数b被c引用，函数b又依赖函数a，因此函数a在返回后不会被GC回收。\n\n## 变量搜索顺序\n1. 先搜索自身的活动对象，如果存在则返回，如果不存在将继续搜索函数a的活动对象，依次查找，直到找到为止。\n2. 如果函数b存在prototype原型对象，则在查找完自身的活动对象后先查找自身的原型对象，再继续查找。这就是Javascript中的变量查找机制。\n3. 如果整个作用域链上都无法找到，则返回undefined。\n\n## 常用的用法\n\n我们在使用for循环时，例如绑定点击事件，常常只能取到最后一个元素，这时我们要用闭包来解决。举例：\n```javascript\nvar myul = document.getElementsByTagName(\"ul\")[0];\nvar list = myul.getElementsByTagName(\"li\");\nfunction foo(){\n  for(var i = 0, len = list.length; i < len; i++){\n    var that = list[i];\n    list[i].onclick = (function(k){\n      var info = that.innerHTML;\n      return function(){\n        alert(k + \"----\" + info);\n      };\n    })(i);\n  }\n}\nfoo();\n```","slug":"JS闭包","published":1,"updated":"2017-03-13T07:46:46.849Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqjc0002zss33n1h4gzz","content":"<h2 id=\"闭包的概念\"><a href=\"#闭包的概念\" class=\"headerlink\" title=\"闭包的概念\"></a>闭包的概念</h2><p>官方”的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因此这些变量也是该表达式的一部分。<br>这句话非常的难懂，详细的说，所谓“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层函数体中的临时变量。<br>这使得只要目标 对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目 标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。<br>即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新 的值，和上次那次调用的是各自独立的。</p>\n<h2 id=\"我的理解和使用\"><a href=\"#我的理解和使用\" class=\"headerlink\" title=\"我的理解和使用\"></a>我的理解和使用</h2><p>我的理解是，闭包就是能够读取其他函数内部变量的函数。我使用的范围，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>变量的作用域无非就是两种：全局变量和局部变量。<br>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　\talert(n);</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　f1(); <span class=\"comment\">// 999</span></div></pre></td></tr></table></figure>\n<p>另一方面，在函数外部自然无法读取函数内的局部变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　alert(n); <span class=\"comment\">// error</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h2><blockquote>\n<ul>\n<li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li>\n<li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li>\n</ul>\n</blockquote>\n<h2 id=\"深入理解\"><a href=\"#深入理解\" class=\"headerlink\" title=\"深入理解\"></a>深入理解</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\"> \t<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; </div><div class=\"line\"> \t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t alert(++i);</div><div class=\"line\">\t &#125; </div><div class=\"line\"> \t<span class=\"keyword\">return</span> b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> c = a();</div><div class=\"line\">c();</div></pre></td></tr></table></figure>\n<p>我们需要引入另外几个概念：函数的执行环境(excution context)、活动对象(call object)、作用域(scope)、作用域链(scope chain)。<br> 我们以函数a从定义到执行的过程为例阐述这几个概念。</p>\n<ol>\n<li>当定义函数a的时候，js解释器会将函数a的作用域链(scope chain)设置为定义a时a所在的“环境”，如果a是一个全局函数，则scope chain中只有window对象。</li>\n<li>当执行函数a的时候，a会进入相应的执行环境(excution context)。</li>\n<li>在创建执行环境的过程中，首先会为a添加一个scope属性，即a的作用域，其值就为第1步中的scope chain。即a.scope=a的作用域链。</li>\n<li>然后执行环境会创建一个活动对象(call object)。活动对象也是一个拥有属性的对象，但它不具有原型而且不能通过JavaScript代码直接访问。创建完活动对象后，把活动对象添加到a的作用域链的最顶端。此时a的作用域链包含了两个对象：a的活动对象和window对象。</li>\n<li>下一步是在活动对象上添加一个arguments属性，它保存着调用函数a时所传递的参数。</li>\n<li>最后把所有函数a的形参和内部的函数b的引用也添加到a的活动对象上。在这一步中，完成了函数b的的定义，因此如同第3步，函数b的作用域链被设置为b所被定义的环境，即a的作用域。</li>\n</ol>\n<p>到此，整个函数a从定义到执行的步骤就完成了。此时a返回函数b的引用给c，又函数b的作用域链包含了对函数a的活动对象的引用，也就是说b可以访问到a中定义的所有变量和函数。函数b被c引用，函数b又依赖函数a，因此函数a在返回后不会被GC回收。</p>\n<h2 id=\"变量搜索顺序\"><a href=\"#变量搜索顺序\" class=\"headerlink\" title=\"变量搜索顺序\"></a>变量搜索顺序</h2><ol>\n<li>先搜索自身的活动对象，如果存在则返回，如果不存在将继续搜索函数a的活动对象，依次查找，直到找到为止。</li>\n<li>如果函数b存在prototype原型对象，则在查找完自身的活动对象后先查找自身的原型对象，再继续查找。这就是Javascript中的变量查找机制。</li>\n<li>如果整个作用域链上都无法找到，则返回undefined。</li>\n</ol>\n<h2 id=\"常用的用法\"><a href=\"#常用的用法\" class=\"headerlink\" title=\"常用的用法\"></a>常用的用法</h2><p>我们在使用for循环时，例如绑定点击事件，常常只能取到最后一个元素，这时我们要用闭包来解决。举例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myul = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"ul\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> list = myul.getElementsByTagName(<span class=\"string\">\"li\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = list.length; i &lt; len; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = list[i];</div><div class=\"line\">    list[i].onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> info = that.innerHTML;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(k + <span class=\"string\">\"----\"</span> + info);</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;)(i);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h2 id=\"闭包的概念\"><a href=\"#闭包的概念\" class=\"headerlink\" title=\"闭包的概念\"></a>闭包的概念</h2><p>官方”的解释是：闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因此这些变量也是该表达式的一部分。<br>这句话非常的难懂，详细的说，所谓“闭包”，就是在构造函数体内定义另外的函数作为目标对象的方法函数，而这个对象的方法函数反过来引用外层函数体中的临时变量。<br>这使得只要目标 对象在生存期内始终能保持其方法，就能间接保持原构造函数体当时用到的临时变量值。尽管最开始的构造函数调用已经结束，临时变量的名称也都消失了，但在目 标对象的方法内却始终能引用到该变量的值，而且该值只能通这种方法来访问。<br>即使再次调用相同的构造函数，但只会生成新对象和方法，新的临时变量只是对应新 的值，和上次那次调用的是各自独立的。</p>\n<h2 id=\"我的理解和使用\"><a href=\"#我的理解和使用\" class=\"headerlink\" title=\"我的理解和使用\"></a>我的理解和使用</h2><p>我的理解是，闭包就是能够读取其他函数内部变量的函数。我使用的范围，一个是前面提到的可以读取函数内部的变量，另一个就是让这些变量的值始终保持在内存中。</p>\n<h2 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h2><p>变量的作用域无非就是两种：全局变量和局部变量。<br>Javascript语言的特殊之处，就在于函数内部可以直接读取全局变量。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　\talert(n);</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　f1(); <span class=\"comment\">// 999</span></div></pre></td></tr></table></figure>\n<p>另一方面，在函数外部自然无法读取函数内的局部变量。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">　　<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">　　　　<span class=\"keyword\">var</span> n=<span class=\"number\">999</span>;</div><div class=\"line\">　　&#125;</div><div class=\"line\">　　alert(n); <span class=\"comment\">// error</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"使用闭包的注意点\"><a href=\"#使用闭包的注意点\" class=\"headerlink\" title=\"使用闭包的注意点\"></a>使用闭包的注意点</h2><blockquote>\n<ul>\n<li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li>\n<li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li>\n</ul>\n</blockquote>\n<h2 id=\"深入理解\"><a href=\"#深入理解\" class=\"headerlink\" title=\"深入理解\"></a>深入理解</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123; </div><div class=\"line\"> \t<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; </div><div class=\"line\"> \t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">\t\t alert(++i);</div><div class=\"line\">\t &#125; </div><div class=\"line\"> \t<span class=\"keyword\">return</span> b;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> c = a();</div><div class=\"line\">c();</div></pre></td></tr></table></figure>\n<p>我们需要引入另外几个概念：函数的执行环境(excution context)、活动对象(call object)、作用域(scope)、作用域链(scope chain)。<br> 我们以函数a从定义到执行的过程为例阐述这几个概念。</p>\n<ol>\n<li>当定义函数a的时候，js解释器会将函数a的作用域链(scope chain)设置为定义a时a所在的“环境”，如果a是一个全局函数，则scope chain中只有window对象。</li>\n<li>当执行函数a的时候，a会进入相应的执行环境(excution context)。</li>\n<li>在创建执行环境的过程中，首先会为a添加一个scope属性，即a的作用域，其值就为第1步中的scope chain。即a.scope=a的作用域链。</li>\n<li>然后执行环境会创建一个活动对象(call object)。活动对象也是一个拥有属性的对象，但它不具有原型而且不能通过JavaScript代码直接访问。创建完活动对象后，把活动对象添加到a的作用域链的最顶端。此时a的作用域链包含了两个对象：a的活动对象和window对象。</li>\n<li>下一步是在活动对象上添加一个arguments属性，它保存着调用函数a时所传递的参数。</li>\n<li>最后把所有函数a的形参和内部的函数b的引用也添加到a的活动对象上。在这一步中，完成了函数b的的定义，因此如同第3步，函数b的作用域链被设置为b所被定义的环境，即a的作用域。</li>\n</ol>\n<p>到此，整个函数a从定义到执行的步骤就完成了。此时a返回函数b的引用给c，又函数b的作用域链包含了对函数a的活动对象的引用，也就是说b可以访问到a中定义的所有变量和函数。函数b被c引用，函数b又依赖函数a，因此函数a在返回后不会被GC回收。</p>\n<h2 id=\"变量搜索顺序\"><a href=\"#变量搜索顺序\" class=\"headerlink\" title=\"变量搜索顺序\"></a>变量搜索顺序</h2><ol>\n<li>先搜索自身的活动对象，如果存在则返回，如果不存在将继续搜索函数a的活动对象，依次查找，直到找到为止。</li>\n<li>如果函数b存在prototype原型对象，则在查找完自身的活动对象后先查找自身的原型对象，再继续查找。这就是Javascript中的变量查找机制。</li>\n<li>如果整个作用域链上都无法找到，则返回undefined。</li>\n</ol>\n<h2 id=\"常用的用法\"><a href=\"#常用的用法\" class=\"headerlink\" title=\"常用的用法\"></a>常用的用法</h2><p>我们在使用for循环时，例如绑定点击事件，常常只能取到最后一个元素，这时我们要用闭包来解决。举例：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> myul = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"ul\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\"><span class=\"keyword\">var</span> list = myul.getElementsByTagName(<span class=\"string\">\"li\"</span>);</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">foo</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, len = list.length; i &lt; len; i++)&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> that = list[i];</div><div class=\"line\">    list[i].onclick = (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">k</span>)</span>&#123;</div><div class=\"line\">      <span class=\"keyword\">var</span> info = that.innerHTML;</div><div class=\"line\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        alert(k + <span class=\"string\">\"----\"</span> + info);</div><div class=\"line\">      &#125;;</div><div class=\"line\">    &#125;)(i);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">foo();</div></pre></td></tr></table></figure></p>\n"},{"title":"css伪类和伪元素","date":"2016-06-10T05:56:16.000Z","_content":"\n## 伪类和伪元素的概念\nw3c 对两者的定义：\n>* CSS 伪类用于向某些选择器添加特殊的效果。\n>* CSS 伪元素用于将特殊的效果添加到某些选择器。\n\n## 伪类和伪元素的区别\n这里用伪类 :first-child 和伪元素 :first-letter 来进行比较。\n```\n\tp>i:first-child {\n\t\tcolor: red\n\t}\n//结构\n\t<p>\n    \t<i>first</i>\n    \t<i>second</i>\n\t</p>\n```\n如果我们不使用伪类，而希望达到上述效果，可以这样做：\n```\n\t.first-child {\n\t\tcolor: red\n\t}\n//结构\n\t<p>\n    \t<i class=\"first-child\">first</i>\n    \t<i>second</i>\n\t</p>\n```\n即我们给第一个子元素添加一个类，然后定义这个类的样式。那么我们接着看看为元素：\n```\n\tp:first-letter {\n\t\tcolor: red\n\t}\n//结构\n\t<p>I am stephen lee.</p>\n```\n那么如果我们不使用伪元素，要达到上述效果，应该怎么做呢？\n```\n\t.first-letter {\n\t\tcolor: red\n\t}\n//结构\n\t<p><span class='first-letter'>I</span> am stephen lee.</p>\n```\n即我们给第一个字母添加一个 span，然后给 span 增加样式。\n两者的区别已经出来了。那就是：\n>* 伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，这也是为什么他们一个称为伪类，一个称为伪元素的原因。\n\n## 常见的伪类和伪元素说明\n\n### 锚伪类\n\n伪类 | 说明\n-----|------\na:link|未访问的链接    \na:visited| 已访问的链接    \na:hover| 鼠标移动到链接上,此伪类不止限于超链接上，其他元素也可使用   \na:active|选定的链接,被激活的元素，其他元素也使用\n\n注意：在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的；a:active 必须被置于 a:hover 之后，才是有效的；伪类名称对大小写不敏感。\n### 其余伪类\n\n伪类 | 说明\n-----|------ \n:focus| 向拥有键盘输入焦点的元素添加样式。\n:first-child\t| 向元素的第一个子元素添加样式。\n:lang|向带有指定 lang 属性的元素添加样式。\n\n### 伪元素\n\nCSS中，还有伪元素，形态及使用方法类同伪类。\n\n伪元素 | 说明\n-----|------ \n:first-letter|向文本的第一个字母添加特殊样式。\n:first-line\t| 向文本的首行添加特殊样式。。\n:before|在元素之前添加内容。\n:after|在元素之后添加内容。","source":"_posts/css伪类.md","raw":"---\ntitle: css伪类和伪元素\ndate: 2016-06-10 13:56:16\ntags: [css]\n---\n\n## 伪类和伪元素的概念\nw3c 对两者的定义：\n>* CSS 伪类用于向某些选择器添加特殊的效果。\n>* CSS 伪元素用于将特殊的效果添加到某些选择器。\n\n## 伪类和伪元素的区别\n这里用伪类 :first-child 和伪元素 :first-letter 来进行比较。\n```\n\tp>i:first-child {\n\t\tcolor: red\n\t}\n//结构\n\t<p>\n    \t<i>first</i>\n    \t<i>second</i>\n\t</p>\n```\n如果我们不使用伪类，而希望达到上述效果，可以这样做：\n```\n\t.first-child {\n\t\tcolor: red\n\t}\n//结构\n\t<p>\n    \t<i class=\"first-child\">first</i>\n    \t<i>second</i>\n\t</p>\n```\n即我们给第一个子元素添加一个类，然后定义这个类的样式。那么我们接着看看为元素：\n```\n\tp:first-letter {\n\t\tcolor: red\n\t}\n//结构\n\t<p>I am stephen lee.</p>\n```\n那么如果我们不使用伪元素，要达到上述效果，应该怎么做呢？\n```\n\t.first-letter {\n\t\tcolor: red\n\t}\n//结构\n\t<p><span class='first-letter'>I</span> am stephen lee.</p>\n```\n即我们给第一个字母添加一个 span，然后给 span 增加样式。\n两者的区别已经出来了。那就是：\n>* 伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，这也是为什么他们一个称为伪类，一个称为伪元素的原因。\n\n## 常见的伪类和伪元素说明\n\n### 锚伪类\n\n伪类 | 说明\n-----|------\na:link|未访问的链接    \na:visited| 已访问的链接    \na:hover| 鼠标移动到链接上,此伪类不止限于超链接上，其他元素也可使用   \na:active|选定的链接,被激活的元素，其他元素也使用\n\n注意：在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的；a:active 必须被置于 a:hover 之后，才是有效的；伪类名称对大小写不敏感。\n### 其余伪类\n\n伪类 | 说明\n-----|------ \n:focus| 向拥有键盘输入焦点的元素添加样式。\n:first-child\t| 向元素的第一个子元素添加样式。\n:lang|向带有指定 lang 属性的元素添加样式。\n\n### 伪元素\n\nCSS中，还有伪元素，形态及使用方法类同伪类。\n\n伪元素 | 说明\n-----|------ \n:first-letter|向文本的第一个字母添加特殊样式。\n:first-line\t| 向文本的首行添加特殊样式。。\n:before|在元素之前添加内容。\n:after|在元素之后添加内容。","slug":"css伪类","published":1,"updated":"2017-03-13T07:46:46.854Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqjh0004zss33zo146qi","content":"<h2 id=\"伪类和伪元素的概念\"><a href=\"#伪类和伪元素的概念\" class=\"headerlink\" title=\"伪类和伪元素的概念\"></a>伪类和伪元素的概念</h2><p>w3c 对两者的定义：</p>\n<blockquote>\n<ul>\n<li>CSS 伪类用于向某些选择器添加特殊的效果。</li>\n<li>CSS 伪元素用于将特殊的效果添加到某些选择器。</li>\n</ul>\n</blockquote>\n<h2 id=\"伪类和伪元素的区别\"><a href=\"#伪类和伪元素的区别\" class=\"headerlink\" title=\"伪类和伪元素的区别\"></a>伪类和伪元素的区别</h2><p>这里用伪类 :first-child 和伪元素 :first-letter 来进行比较。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tp&gt;i:first-child &#123;</div><div class=\"line\">\t\tcolor: red</div><div class=\"line\">\t&#125;</div><div class=\"line\">//结构</div><div class=\"line\">\t&lt;p&gt;</div><div class=\"line\">    \t&lt;i&gt;first&lt;/i&gt;</div><div class=\"line\">    \t&lt;i&gt;second&lt;/i&gt;</div><div class=\"line\">\t&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>如果我们不使用伪类，而希望达到上述效果，可以这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t.first-child &#123;</div><div class=\"line\">\t\tcolor: red</div><div class=\"line\">\t&#125;</div><div class=\"line\">//结构</div><div class=\"line\">\t&lt;p&gt;</div><div class=\"line\">    \t&lt;i class=&quot;first-child&quot;&gt;first&lt;/i&gt;</div><div class=\"line\">    \t&lt;i&gt;second&lt;/i&gt;</div><div class=\"line\">\t&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>即我们给第一个子元素添加一个类，然后定义这个类的样式。那么我们接着看看为元素：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tp:first-letter &#123;</div><div class=\"line\">\t\tcolor: red</div><div class=\"line\">\t&#125;</div><div class=\"line\">//结构</div><div class=\"line\">\t&lt;p&gt;I am stephen lee.&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>那么如果我们不使用伪元素，要达到上述效果，应该怎么做呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t.first-letter &#123;</div><div class=\"line\">\t\tcolor: red</div><div class=\"line\">\t&#125;</div><div class=\"line\">//结构</div><div class=\"line\">\t&lt;p&gt;&lt;span class=&apos;first-letter&apos;&gt;I&lt;/span&gt; am stephen lee.&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>即我们给第一个字母添加一个 span，然后给 span 增加样式。<br>两者的区别已经出来了。那就是：</p>\n<blockquote>\n<ul>\n<li>伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，这也是为什么他们一个称为伪类，一个称为伪元素的原因。</li>\n</ul>\n</blockquote>\n<h2 id=\"常见的伪类和伪元素说明\"><a href=\"#常见的伪类和伪元素说明\" class=\"headerlink\" title=\"常见的伪类和伪元素说明\"></a>常见的伪类和伪元素说明</h2><h3 id=\"锚伪类\"><a href=\"#锚伪类\" class=\"headerlink\" title=\"锚伪类\"></a>锚伪类</h3><table>\n<thead>\n<tr>\n<th>伪类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a:link</td>\n<td>未访问的链接    </td>\n</tr>\n<tr>\n<td>a:visited</td>\n<td>已访问的链接    </td>\n</tr>\n<tr>\n<td>a:hover</td>\n<td>鼠标移动到链接上,此伪类不止限于超链接上，其他元素也可使用   </td>\n</tr>\n<tr>\n<td>a:active</td>\n<td>选定的链接,被激活的元素，其他元素也使用</td>\n</tr>\n</tbody>\n</table>\n<p>注意：在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的；a:active 必须被置于 a:hover 之后，才是有效的；伪类名称对大小写不敏感。</p>\n<h3 id=\"其余伪类\"><a href=\"#其余伪类\" class=\"headerlink\" title=\"其余伪类\"></a>其余伪类</h3><table>\n<thead>\n<tr>\n<th>伪类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:focus</td>\n<td>向拥有键盘输入焦点的元素添加样式。</td>\n</tr>\n<tr>\n<td>:first-child</td>\n<td>向元素的第一个子元素添加样式。</td>\n</tr>\n<tr>\n<td>:lang</td>\n<td>向带有指定 lang 属性的元素添加样式。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h3><p>CSS中，还有伪元素，形态及使用方法类同伪类。</p>\n<table>\n<thead>\n<tr>\n<th>伪元素</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:first-letter</td>\n<td>向文本的第一个字母添加特殊样式。</td>\n</tr>\n<tr>\n<td>:first-line</td>\n<td>向文本的首行添加特殊样式。。</td>\n</tr>\n<tr>\n<td>:before</td>\n<td>在元素之前添加内容。</td>\n</tr>\n<tr>\n<td>:after</td>\n<td>在元素之后添加内容。</td>\n</tr>\n</tbody>\n</table>\n","excerpt":"","more":"<h2 id=\"伪类和伪元素的概念\"><a href=\"#伪类和伪元素的概念\" class=\"headerlink\" title=\"伪类和伪元素的概念\"></a>伪类和伪元素的概念</h2><p>w3c 对两者的定义：</p>\n<blockquote>\n<ul>\n<li>CSS 伪类用于向某些选择器添加特殊的效果。</li>\n<li>CSS 伪元素用于将特殊的效果添加到某些选择器。</li>\n</ul>\n</blockquote>\n<h2 id=\"伪类和伪元素的区别\"><a href=\"#伪类和伪元素的区别\" class=\"headerlink\" title=\"伪类和伪元素的区别\"></a>伪类和伪元素的区别</h2><p>这里用伪类 :first-child 和伪元素 :first-letter 来进行比较。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tp&gt;i:first-child &#123;</div><div class=\"line\">\t\tcolor: red</div><div class=\"line\">\t&#125;</div><div class=\"line\">//结构</div><div class=\"line\">\t&lt;p&gt;</div><div class=\"line\">    \t&lt;i&gt;first&lt;/i&gt;</div><div class=\"line\">    \t&lt;i&gt;second&lt;/i&gt;</div><div class=\"line\">\t&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>如果我们不使用伪类，而希望达到上述效果，可以这样做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t.first-child &#123;</div><div class=\"line\">\t\tcolor: red</div><div class=\"line\">\t&#125;</div><div class=\"line\">//结构</div><div class=\"line\">\t&lt;p&gt;</div><div class=\"line\">    \t&lt;i class=&quot;first-child&quot;&gt;first&lt;/i&gt;</div><div class=\"line\">    \t&lt;i&gt;second&lt;/i&gt;</div><div class=\"line\">\t&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>即我们给第一个子元素添加一个类，然后定义这个类的样式。那么我们接着看看为元素：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\tp:first-letter &#123;</div><div class=\"line\">\t\tcolor: red</div><div class=\"line\">\t&#125;</div><div class=\"line\">//结构</div><div class=\"line\">\t&lt;p&gt;I am stephen lee.&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>那么如果我们不使用伪元素，要达到上述效果，应该怎么做呢？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">\t.first-letter &#123;</div><div class=\"line\">\t\tcolor: red</div><div class=\"line\">\t&#125;</div><div class=\"line\">//结构</div><div class=\"line\">\t&lt;p&gt;&lt;span class=&apos;first-letter&apos;&gt;I&lt;/span&gt; am stephen lee.&lt;/p&gt;</div></pre></td></tr></table></figure></p>\n<p>即我们给第一个字母添加一个 span，然后给 span 增加样式。<br>两者的区别已经出来了。那就是：</p>\n<blockquote>\n<ul>\n<li>伪类的效果可以通过添加一个实际的类来达到，而伪元素的效果则需要通过添加一个实际的元素才能达到，这也是为什么他们一个称为伪类，一个称为伪元素的原因。</li>\n</ul>\n</blockquote>\n<h2 id=\"常见的伪类和伪元素说明\"><a href=\"#常见的伪类和伪元素说明\" class=\"headerlink\" title=\"常见的伪类和伪元素说明\"></a>常见的伪类和伪元素说明</h2><h3 id=\"锚伪类\"><a href=\"#锚伪类\" class=\"headerlink\" title=\"锚伪类\"></a>锚伪类</h3><table>\n<thead>\n<tr>\n<th>伪类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a:link</td>\n<td>未访问的链接    </td>\n</tr>\n<tr>\n<td>a:visited</td>\n<td>已访问的链接    </td>\n</tr>\n<tr>\n<td>a:hover</td>\n<td>鼠标移动到链接上,此伪类不止限于超链接上，其他元素也可使用   </td>\n</tr>\n<tr>\n<td>a:active</td>\n<td>选定的链接,被激活的元素，其他元素也使用</td>\n</tr>\n</tbody>\n</table>\n<p>注意：在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的；a:active 必须被置于 a:hover 之后，才是有效的；伪类名称对大小写不敏感。</p>\n<h3 id=\"其余伪类\"><a href=\"#其余伪类\" class=\"headerlink\" title=\"其余伪类\"></a>其余伪类</h3><table>\n<thead>\n<tr>\n<th>伪类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:focus</td>\n<td>向拥有键盘输入焦点的元素添加样式。</td>\n</tr>\n<tr>\n<td>:first-child</td>\n<td>向元素的第一个子元素添加样式。</td>\n</tr>\n<tr>\n<td>:lang</td>\n<td>向带有指定 lang 属性的元素添加样式。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"伪元素\"><a href=\"#伪元素\" class=\"headerlink\" title=\"伪元素\"></a>伪元素</h3><p>CSS中，还有伪元素，形态及使用方法类同伪类。</p>\n<table>\n<thead>\n<tr>\n<th>伪元素</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>:first-letter</td>\n<td>向文本的第一个字母添加特殊样式。</td>\n</tr>\n<tr>\n<td>:first-line</td>\n<td>向文本的首行添加特殊样式。。</td>\n</tr>\n<tr>\n<td>:before</td>\n<td>在元素之前添加内容。</td>\n</tr>\n<tr>\n<td>:after</td>\n<td>在元素之后添加内容。</td>\n</tr>\n</tbody>\n</table>\n"},{"title":"windows系统下如何安装git","_content":"公司是使用Git进行版本控制，今天我准备好好调戏调戏它，顺便记录一下过程。安装包可以去[百度网盘](http://pan.baidu.com/s/1eQNL8Hk)下载。提取密码为：vp2t。当然也可以前往官网下载，这里使用的是2.5.1，64位的版本。\n\n## 准备开始\n\n### 安装过程我的选择如下\n![安装过程图一](http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200355.png)\n               \n![安装过程图二](http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200446.png)\n\n![安装过程图三](http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200507.png)\n\n对于上诉的选择有疑惑的只有第三章图：\n - 第一个选项:如果是跨平台项目.在windows系统安装.选择, \n - 第二个选项:如果是跨平台项目.在Unix系统安装.选择, \n - 第三个选项:非跨平台项目.选择.\n\n### 检查本地是否曾经安装过git\n\n```\n   $ cd ~/. ssh\n```\n\n 如果提示：No such file or directory 说明你是第一次使用git;如果不是第一次使用，请执行下面的操作，清理原有的SSH密钥。\n\n```\n   $ mkdir key_backup\n   $ cp id_rsa* key_backup\n   $ rm id_rsa* \n```\n\n### 第一次设置git\n\n - 填写自己的用户名（即托管代码时的用户名） \n```\n$ git config --global user.name \"yourname\"\n```\n\n - 填写自己的邮箱\n```\n$ git config --global user.email \"yourmaill@yourmaili.com\" \n```\n\n### 生成密钥\n\n```\nssh-keygen –t rsa –C “yourmaill@yourmaili.com”\n```\n\n打开本地的.ssh/id_rsa.pub，此文件里面内容为刚才生成人密钥。可以复制里面的内容到托管项目网站，添加SSH\n","source":"_posts/hello-world.md","raw":"---\ntitle: windows系统下如何安装git\n---\n公司是使用Git进行版本控制，今天我准备好好调戏调戏它，顺便记录一下过程。安装包可以去[百度网盘](http://pan.baidu.com/s/1eQNL8Hk)下载。提取密码为：vp2t。当然也可以前往官网下载，这里使用的是2.5.1，64位的版本。\n\n## 准备开始\n\n### 安装过程我的选择如下\n![安装过程图一](http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200355.png)\n               \n![安装过程图二](http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200446.png)\n\n![安装过程图三](http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200507.png)\n\n对于上诉的选择有疑惑的只有第三章图：\n - 第一个选项:如果是跨平台项目.在windows系统安装.选择, \n - 第二个选项:如果是跨平台项目.在Unix系统安装.选择, \n - 第三个选项:非跨平台项目.选择.\n\n### 检查本地是否曾经安装过git\n\n```\n   $ cd ~/. ssh\n```\n\n 如果提示：No such file or directory 说明你是第一次使用git;如果不是第一次使用，请执行下面的操作，清理原有的SSH密钥。\n\n```\n   $ mkdir key_backup\n   $ cp id_rsa* key_backup\n   $ rm id_rsa* \n```\n\n### 第一次设置git\n\n - 填写自己的用户名（即托管代码时的用户名） \n```\n$ git config --global user.name \"yourname\"\n```\n\n - 填写自己的邮箱\n```\n$ git config --global user.email \"yourmaill@yourmaili.com\" \n```\n\n### 生成密钥\n\n```\nssh-keygen –t rsa –C “yourmaill@yourmaili.com”\n```\n\n打开本地的.ssh/id_rsa.pub，此文件里面内容为刚才生成人密钥。可以复制里面的内容到托管项目网站，添加SSH\n","slug":"hello-world","published":1,"date":"2017-03-13T07:46:46.858Z","updated":"2017-03-13T07:46:46.863Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqjl0005zss3c7eyp7m4","content":"<p>公司是使用Git进行版本控制，今天我准备好好调戏调戏它，顺便记录一下过程。安装包可以去<a href=\"http://pan.baidu.com/s/1eQNL8Hk\" target=\"_blank\" rel=\"external\">百度网盘</a>下载。提取密码为：vp2t。当然也可以前往官网下载，这里使用的是2.5.1，64位的版本。</p>\n<h2 id=\"准备开始\"><a href=\"#准备开始\" class=\"headerlink\" title=\"准备开始\"></a>准备开始</h2><h3 id=\"安装过程我的选择如下\"><a href=\"#安装过程我的选择如下\" class=\"headerlink\" title=\"安装过程我的选择如下\"></a>安装过程我的选择如下</h3><p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200355.png\" alt=\"安装过程图一\"></p>\n<p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200446.png\" alt=\"安装过程图二\"></p>\n<p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200507.png\" alt=\"安装过程图三\"></p>\n<p>对于上诉的选择有疑惑的只有第三章图：</p>\n<ul>\n<li>第一个选项:如果是跨平台项目.在windows系统安装.选择, </li>\n<li>第二个选项:如果是跨平台项目.在Unix系统安装.选择, </li>\n<li>第三个选项:非跨平台项目.选择.</li>\n</ul>\n<h3 id=\"检查本地是否曾经安装过git\"><a href=\"#检查本地是否曾经安装过git\" class=\"headerlink\" title=\"检查本地是否曾经安装过git\"></a>检查本地是否曾经安装过git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/. ssh</div></pre></td></tr></table></figure>\n<p> 如果提示：No such file or directory 说明你是第一次使用git;如果不是第一次使用，请执行下面的操作，清理原有的SSH密钥。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir key_backup</div><div class=\"line\">$ cp id_rsa* key_backup</div><div class=\"line\">$ rm id_rsa*</div></pre></td></tr></table></figure>\n<h3 id=\"第一次设置git\"><a href=\"#第一次设置git\" class=\"headerlink\" title=\"第一次设置git\"></a>第一次设置git</h3><ul>\n<li><p>填写自己的用户名（即托管代码时的用户名） </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;yourname&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>填写自己的邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.email &quot;yourmaill@yourmaili.com&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen –t rsa –C “yourmaill@yourmaili.com”</div></pre></td></tr></table></figure>\n<p>打开本地的.ssh/id_rsa.pub，此文件里面内容为刚才生成人密钥。可以复制里面的内容到托管项目网站，添加SSH</p>\n","excerpt":"","more":"<p>公司是使用Git进行版本控制，今天我准备好好调戏调戏它，顺便记录一下过程。安装包可以去<a href=\"http://pan.baidu.com/s/1eQNL8Hk\">百度网盘</a>下载。提取密码为：vp2t。当然也可以前往官网下载，这里使用的是2.5.1，64位的版本。</p>\n<h2 id=\"准备开始\"><a href=\"#准备开始\" class=\"headerlink\" title=\"准备开始\"></a>准备开始</h2><h3 id=\"安装过程我的选择如下\"><a href=\"#安装过程我的选择如下\" class=\"headerlink\" title=\"安装过程我的选择如下\"></a>安装过程我的选择如下</h3><p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200355.png\" alt=\"安装过程图一\"></p>\n<p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200446.png\" alt=\"安装过程图二\"></p>\n<p><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160305200507.png\" alt=\"安装过程图三\"></p>\n<p>对于上诉的选择有疑惑的只有第三章图：</p>\n<ul>\n<li>第一个选项:如果是跨平台项目.在windows系统安装.选择, </li>\n<li>第二个选项:如果是跨平台项目.在Unix系统安装.选择, </li>\n<li>第三个选项:非跨平台项目.选择.</li>\n</ul>\n<h3 id=\"检查本地是否曾经安装过git\"><a href=\"#检查本地是否曾经安装过git\" class=\"headerlink\" title=\"检查本地是否曾经安装过git\"></a>检查本地是否曾经安装过git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ cd ~/. ssh</div></pre></td></tr></table></figure>\n<p> 如果提示：No such file or directory 说明你是第一次使用git;如果不是第一次使用，请执行下面的操作，清理原有的SSH密钥。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ mkdir key_backup</div><div class=\"line\">$ cp id_rsa* key_backup</div><div class=\"line\">$ rm id_rsa*</div></pre></td></tr></table></figure>\n<h3 id=\"第一次设置git\"><a href=\"#第一次设置git\" class=\"headerlink\" title=\"第一次设置git\"></a>第一次设置git</h3><ul>\n<li><p>填写自己的用户名（即托管代码时的用户名） </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.name &quot;yourname&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>填写自己的邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ git config --global user.email &quot;yourmaill@yourmaili.com&quot;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"生成密钥\"><a href=\"#生成密钥\" class=\"headerlink\" title=\"生成密钥\"></a>生成密钥</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen –t rsa –C “yourmaill@yourmaili.com”</div></pre></td></tr></table></figure>\n<p>打开本地的.ssh/id_rsa.pub，此文件里面内容为刚才生成人密钥。可以复制里面的内容到托管项目网站，添加SSH</p>\n"},{"title":"css属性选择器","date":"2016-05-17T12:24:04.000Z","_content":"## 基础说明\nCSS 2 引入了属性选择器，可以根据元素的属性及属性值来选择元素。下面列举了常用的方法，参考[w3school](http://www.w3school.com.cn/css/css_selector_attribute.asp) \n\n## 属性举例\n\n### [title]获取有title属性的元素。\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\n\t\t<style>\t\t\t\n\t\t[yezi] { background: red;} /*IE7 √ IE8 √ IE9 √ IE11 √ safari √ firefox √ chrome √*/\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li yezi>无序列表第一</li>\n\t\t\t<li>无序列表第二</li>\n\t\t\t<li zi>无序列表第一</li>\n\t\t\t<li>无序列表第二</li>\n\t\t\t<li ye>无序列表第一</li>\n\t\t</ul>\n\t</body>\n</html>\n\n```\n\n\n运行结果图：\n![运行截图1](http://7xrkml.com1.z0.glb.clouddn.com/1.png)\n\n### [title=yezi]:获取title属性值为yezi的元素。\n\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\n\t\t[title=yezi] { background:#FFE4C4;}/*IE7 √ IE8 √ IE9 √ IE11 √ safari √ firefox √ chrome √*/\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"yezi\">无序列表第一</li>\n\t\t\t<li title=\"11 yezi\">无序列表第二</li>\n\t\t\t<li title=\"yezi\">无序列表第三</li>\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图2](http://7xrkml.com1.z0.glb.clouddn.com/2.png)\n\n\n### [title~=hello]:获取title元素中有hello样式(可以存在其他的)\n\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\t\t\n\t\t[title~=hello] { background:red}\t\t\t\t\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"hello wrold\">无序列表第一</li>\n\t\t\t<li title=\"hellowrold\">title属性中有hello英文</li>\n\t\t\t<li title=\"hello-wrold\">title属性中有hello英文，-区分</li>\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图3](http://7xrkml.com1.z0.glb.clouddn.com/3.png)\n\n### [title|=hello]:用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。\n\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\t\t\n\t\t[title|=hello] { background:red}\t\t\t\t\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"hello-wrold\">是单词</li>\n\t\t\t<li title=\"hello wrold\">不为一个单词</li>\n\t\t\t<li title=\"hello_wrold\">title属性中有hello英文，_区分</li>\n\t\t\t<li title=\"hellowrold\">title属性中有hello英文</li>\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图4](http://7xrkml.com1.z0.glb.clouddn.com/4.png)\n\n### [title^=hello]:获取title属性值开头是hello的元素\n\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\t\t\n\t\t[title^=hello] { background:red}\t\t\t\t\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"hello-wrold\">hello在开头</li>\n\t\t\t<li title=\"ni-hello\">hello在结尾</li>\t\n\t\t\t<li title=\"hello\">单独hello</li>\n\t\t\t<li title=\"hellowrold\">helloworld 不分开</li>\t\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图5](http://7xrkml.com1.z0.glb.clouddn.com/5.png)\n\n### [title$=hello]:获取title元素值结尾是hello的元素\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\t\t\n\t\t[title$=hello] { background:red}\t\t\t\t\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"hello-wrold\">hello在开头</li>\n\t\t\t<li title=\"ni-hello\">hello在结尾</li>\t\n\t\t\t<li title=\"hello\">单独hello</li>\n\t\t\t<li title=\"hellowrold\">helloworld 不分开</li>\t\t\t\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图6](http://7xrkml.com1.z0.glb.clouddn.com/6.png)\n\n### [title*=hello]:获取title元素值中存在hello的元素。\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\t\t\n\t\t[title*=hello] { background:red}\t\t\t\t\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"wroldhellowrold\">中间有hello</li>\n\t\t\t<li title=\"hello-wrold\">hello在开头</li>\n\t\t\t<li title=\"ni-hello\">hello在结尾</li>\t\n\t\t\t<li title=\"hello\">单独hello</li>\n\t\t\t<li title=\"hellowrold\">helloworld 不分开</li>\t\t\t\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图7](http://7xrkml.com1.z0.glb.clouddn.com/7.png)","source":"_posts/css属性选择器.md","raw":"---\ntitle: css属性选择器\ndate: 2016-05-17 20:24:04\ntags: [css]\n---\n## 基础说明\nCSS 2 引入了属性选择器，可以根据元素的属性及属性值来选择元素。下面列举了常用的方法，参考[w3school](http://www.w3school.com.cn/css/css_selector_attribute.asp) \n\n## 属性举例\n\n### [title]获取有title属性的元素。\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\n\t\t<style>\t\t\t\n\t\t[yezi] { background: red;} /*IE7 √ IE8 √ IE9 √ IE11 √ safari √ firefox √ chrome √*/\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li yezi>无序列表第一</li>\n\t\t\t<li>无序列表第二</li>\n\t\t\t<li zi>无序列表第一</li>\n\t\t\t<li>无序列表第二</li>\n\t\t\t<li ye>无序列表第一</li>\n\t\t</ul>\n\t</body>\n</html>\n\n```\n\n\n运行结果图：\n![运行截图1](http://7xrkml.com1.z0.glb.clouddn.com/1.png)\n\n### [title=yezi]:获取title属性值为yezi的元素。\n\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\n\t\t[title=yezi] { background:#FFE4C4;}/*IE7 √ IE8 √ IE9 √ IE11 √ safari √ firefox √ chrome √*/\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"yezi\">无序列表第一</li>\n\t\t\t<li title=\"11 yezi\">无序列表第二</li>\n\t\t\t<li title=\"yezi\">无序列表第三</li>\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图2](http://7xrkml.com1.z0.glb.clouddn.com/2.png)\n\n\n### [title~=hello]:获取title元素中有hello样式(可以存在其他的)\n\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\t\t\n\t\t[title~=hello] { background:red}\t\t\t\t\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"hello wrold\">无序列表第一</li>\n\t\t\t<li title=\"hellowrold\">title属性中有hello英文</li>\n\t\t\t<li title=\"hello-wrold\">title属性中有hello英文，-区分</li>\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图3](http://7xrkml.com1.z0.glb.clouddn.com/3.png)\n\n### [title|=hello]:用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。\n\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\t\t\n\t\t[title|=hello] { background:red}\t\t\t\t\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"hello-wrold\">是单词</li>\n\t\t\t<li title=\"hello wrold\">不为一个单词</li>\n\t\t\t<li title=\"hello_wrold\">title属性中有hello英文，_区分</li>\n\t\t\t<li title=\"hellowrold\">title属性中有hello英文</li>\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图4](http://7xrkml.com1.z0.glb.clouddn.com/4.png)\n\n### [title^=hello]:获取title属性值开头是hello的元素\n\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\t\t\n\t\t[title^=hello] { background:red}\t\t\t\t\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"hello-wrold\">hello在开头</li>\n\t\t\t<li title=\"ni-hello\">hello在结尾</li>\t\n\t\t\t<li title=\"hello\">单独hello</li>\n\t\t\t<li title=\"hellowrold\">helloworld 不分开</li>\t\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图5](http://7xrkml.com1.z0.glb.clouddn.com/5.png)\n\n### [title$=hello]:获取title元素值结尾是hello的元素\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\t\t\n\t\t[title$=hello] { background:red}\t\t\t\t\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"hello-wrold\">hello在开头</li>\n\t\t\t<li title=\"ni-hello\">hello在结尾</li>\t\n\t\t\t<li title=\"hello\">单独hello</li>\n\t\t\t<li title=\"hellowrold\">helloworld 不分开</li>\t\t\t\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图6](http://7xrkml.com1.z0.glb.clouddn.com/6.png)\n\n### [title*=hello]:获取title元素值中存在hello的元素。\n代码举例：\n\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>选择器</title>\n\t\t<style>\t\t\t\t\t\n\t\t[title*=hello] { background:red}\t\t\t\t\n\t\t</style>\n\t</head>\n\t<body>\n\t\t<ul>\n\t\t\t<li title=\"wroldhellowrold\">中间有hello</li>\n\t\t\t<li title=\"hello-wrold\">hello在开头</li>\n\t\t\t<li title=\"ni-hello\">hello在结尾</li>\t\n\t\t\t<li title=\"hello\">单独hello</li>\n\t\t\t<li title=\"hellowrold\">helloworld 不分开</li>\t\t\t\n\t\t</ul>\n\t</body>\n</html>\n``` \n\n运行结果图：\n![运行截图7](http://7xrkml.com1.z0.glb.clouddn.com/7.png)","slug":"css属性选择器","published":1,"updated":"2017-03-13T07:46:46.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqjm0006zss3jysvmen4","content":"<h2 id=\"基础说明\"><a href=\"#基础说明\" class=\"headerlink\" title=\"基础说明\"></a>基础说明</h2><p>CSS 2 引入了属性选择器，可以根据元素的属性及属性值来选择元素。下面列举了常用的方法，参考<a href=\"http://www.w3school.com.cn/css/css_selector_attribute.asp\" target=\"_blank\" rel=\"external\">w3school</a> </p>\n<h2 id=\"属性举例\"><a href=\"#属性举例\" class=\"headerlink\" title=\"属性举例\"></a>属性举例</h2><h3 id=\"title-获取有title属性的元素。\"><a href=\"#title-获取有title属性的元素。\" class=\"headerlink\" title=\"[title]获取有title属性的元素。\"></a>[title]获取有title属性的元素。</h3><p>代码举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">\t\t\t</span></div><div class=\"line\">\t\t[yezi] &#123; background: red;&#125; /*IE7 √ IE8 √ IE9 √ IE11 √ safari √ firefox √ chrome √*/</div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">yezi</span>&gt;</span>无序列表第一<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>无序列表第二<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">zi</span>&gt;</span>无序列表第一<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>无序列表第二<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ye</span>&gt;</span>无序列表第一<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/1.png\" alt=\"运行截图1\"></p>\n<h3 id=\"title-yezi-获取title属性值为yezi的元素。\"><a href=\"#title-yezi-获取title属性值为yezi的元素。\" class=\"headerlink\" title=\"[title=yezi]:获取title属性值为yezi的元素。\"></a>[title=yezi]:获取title属性值为yezi的元素。</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">            \n        [title=yezi] { background:#FFE4C4;}/*IE7 √ IE8 √ IE9 √ IE11 √ safari √ firefox √ chrome √*/\n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"yezi\"</span>&gt;</span>无序列表第一<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"11 yezi\"</span>&gt;</span>无序列表第二<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"yezi\"</span>&gt;</span>无序列表第三<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/2.png\" alt=\"运行截图2\"></p>\n<h3 id=\"title-hello-获取title元素中有hello样式-可以存在其他的\"><a href=\"#title-hello-获取title元素中有hello样式-可以存在其他的\" class=\"headerlink\" title=\"[title~=hello]:获取title元素中有hello样式(可以存在其他的)\"></a>[title~=hello]:获取title元素中有hello样式(可以存在其他的)</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">                    \n        [title~=hello] { background:red}                \n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello wrold\"</span>&gt;</span>无序列表第一<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hellowrold\"</span>&gt;</span>title属性中有hello英文<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello-wrold\"</span>&gt;</span>title属性中有hello英文，-区分<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/3.png\" alt=\"运行截图3\"></p>\n<h3 id=\"title-hello-用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。\"><a href=\"#title-hello-用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。\" class=\"headerlink\" title=\"[title|=hello]:用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。\"></a>[title|=hello]:用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">                    \n        [title|=hello] { background:red}                \n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello-wrold\"</span>&gt;</span>是单词<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello wrold\"</span>&gt;</span>不为一个单词<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello_wrold\"</span>&gt;</span>title属性中有hello英文，_区分<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hellowrold\"</span>&gt;</span>title属性中有hello英文<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/4.png\" alt=\"运行截图4\"></p>\n<h3 id=\"title-hello-获取title属性值开头是hello的元素\"><a href=\"#title-hello-获取title属性值开头是hello的元素\" class=\"headerlink\" title=\"[title^=hello]:获取title属性值开头是hello的元素\"></a>[title^=hello]:获取title属性值开头是hello的元素</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">                    \n        [title^=hello] { background:red}                \n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello-wrold\"</span>&gt;</span>hello在开头<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"ni-hello\"</span>&gt;</span>hello在结尾<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>    \n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello\"</span>&gt;</span>单独hello<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hellowrold\"</span>&gt;</span>helloworld 不分开<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>    \n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/5.png\" alt=\"运行截图5\"></p>\n<h3 id=\"title-hello-获取title元素值结尾是hello的元素\"><a href=\"#title-hello-获取title元素值结尾是hello的元素\" class=\"headerlink\" title=\"[title$=hello]:获取title元素值结尾是hello的元素\"></a>[title$=hello]:获取title元素值结尾是hello的元素</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">                    \n        [title$=hello] { background:red}                \n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello-wrold\"</span>&gt;</span>hello在开头<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"ni-hello\"</span>&gt;</span>hello在结尾<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>    \n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello\"</span>&gt;</span>单独hello<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hellowrold\"</span>&gt;</span>helloworld 不分开<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>            \n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/6.png\" alt=\"运行截图6\"></p>\n<h3 id=\"title-hello-获取title元素值中存在hello的元素。\"><a href=\"#title-hello-获取title元素值中存在hello的元素。\" class=\"headerlink\" title=\"[title*=hello]:获取title元素值中存在hello的元素。\"></a>[title*=hello]:获取title元素值中存在hello的元素。</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">                    \n        [title*=hello] { background:red}                \n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"wroldhellowrold\"</span>&gt;</span>中间有hello<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello-wrold\"</span>&gt;</span>hello在开头<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"ni-hello\"</span>&gt;</span>hello在结尾<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>    \n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello\"</span>&gt;</span>单独hello<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hellowrold\"</span>&gt;</span>helloworld 不分开<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>            \n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/7.png\" alt=\"运行截图7\"></p>\n","excerpt":"","more":"<h2 id=\"基础说明\"><a href=\"#基础说明\" class=\"headerlink\" title=\"基础说明\"></a>基础说明</h2><p>CSS 2 引入了属性选择器，可以根据元素的属性及属性值来选择元素。下面列举了常用的方法，参考<a href=\"http://www.w3school.com.cn/css/css_selector_attribute.asp\">w3school</a> </p>\n<h2 id=\"属性举例\"><a href=\"#属性举例\" class=\"headerlink\" title=\"属性举例\"></a>属性举例</h2><h3 id=\"title-获取有title属性的元素。\"><a href=\"#title-获取有title属性的元素。\" class=\"headerlink\" title=\"[title]获取有title属性的元素。\"></a>[title]获取有title属性的元素。</h3><p>代码举例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">\t\t\t</div><div class=\"line\">\t\t[yezi] &#123; background: red;&#125; /*IE7 √ IE8 √ IE9 √ IE11 √ safari √ firefox √ chrome √*/</div><div class=\"line\">\t\t</span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">yezi</span>&gt;</span>无序列表第一<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>无序列表第二<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">zi</span>&gt;</span>无序列表第一<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>无序列表第二<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">ye</span>&gt;</span>无序列表第一<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></div><div class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></div><div class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/1.png\" alt=\"运行截图1\"></p>\n<h3 id=\"title-yezi-获取title属性值为yezi的元素。\"><a href=\"#title-yezi-获取title属性值为yezi的元素。\" class=\"headerlink\" title=\"[title=yezi]:获取title属性值为yezi的元素。\"></a>[title=yezi]:获取title属性值为yezi的元素。</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">            \n        [title=yezi] { background:#FFE4C4;}/*IE7 √ IE8 √ IE9 √ IE11 √ safari √ firefox √ chrome √*/\n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"yezi\"</span>&gt;</span>无序列表第一<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"11 yezi\"</span>&gt;</span>无序列表第二<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"yezi\"</span>&gt;</span>无序列表第三<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/2.png\" alt=\"运行截图2\"></p>\n<h3 id=\"title-hello-获取title元素中有hello样式-可以存在其他的\"><a href=\"#title-hello-获取title元素中有hello样式-可以存在其他的\" class=\"headerlink\" title=\"[title~=hello]:获取title元素中有hello样式(可以存在其他的)\"></a>[title~=hello]:获取title元素中有hello样式(可以存在其他的)</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">                    \n        [title~=hello] { background:red}                \n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello wrold\"</span>&gt;</span>无序列表第一<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hellowrold\"</span>&gt;</span>title属性中有hello英文<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello-wrold\"</span>&gt;</span>title属性中有hello英文，-区分<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/3.png\" alt=\"运行截图3\"></p>\n<h3 id=\"title-hello-用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。\"><a href=\"#title-hello-用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。\" class=\"headerlink\" title=\"[title|=hello]:用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。\"></a>[title|=hello]:用于选取带有以指定值开头的属性值的元素，该值必须是整个单词。</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">                    \n        [title|=hello] { background:red}                \n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello-wrold\"</span>&gt;</span>是单词<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello wrold\"</span>&gt;</span>不为一个单词<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello_wrold\"</span>&gt;</span>title属性中有hello英文，_区分<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hellowrold\"</span>&gt;</span>title属性中有hello英文<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/4.png\" alt=\"运行截图4\"></p>\n<h3 id=\"title-hello-获取title属性值开头是hello的元素\"><a href=\"#title-hello-获取title属性值开头是hello的元素\" class=\"headerlink\" title=\"[title^=hello]:获取title属性值开头是hello的元素\"></a>[title^=hello]:获取title属性值开头是hello的元素</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">                    \n        [title^=hello] { background:red}                \n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello-wrold\"</span>&gt;</span>hello在开头<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"ni-hello\"</span>&gt;</span>hello在结尾<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>    \n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello\"</span>&gt;</span>单独hello<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hellowrold\"</span>&gt;</span>helloworld 不分开<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>    \n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/5.png\" alt=\"运行截图5\"></p>\n<h3 id=\"title-hello-获取title元素值结尾是hello的元素\"><a href=\"#title-hello-获取title元素值结尾是hello的元素\" class=\"headerlink\" title=\"[title$=hello]:获取title元素值结尾是hello的元素\"></a>[title$=hello]:获取title元素值结尾是hello的元素</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">                    \n        [title$=hello] { background:red}                \n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello-wrold\"</span>&gt;</span>hello在开头<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"ni-hello\"</span>&gt;</span>hello在结尾<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>    \n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello\"</span>&gt;</span>单独hello<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hellowrold\"</span>&gt;</span>helloworld 不分开<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>            \n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/6.png\" alt=\"运行截图6\"></p>\n<h3 id=\"title-hello-获取title元素值中存在hello的元素。\"><a href=\"#title-hello-获取title元素值中存在hello的元素。\" class=\"headerlink\" title=\"[title*=hello]:获取title元素值中存在hello的元素。\"></a>[title*=hello]:获取title元素值中存在hello的元素。</h3><p>代码举例：</p>\n<pre><code class=\"html\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>选择器<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"undefined\">                    \n        [title*=hello] { background:red}                \n        </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span>\n    <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>\n        <span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"wroldhellowrold\"</span>&gt;</span>中间有hello<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello-wrold\"</span>&gt;</span>hello在开头<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"ni-hello\"</span>&gt;</span>hello在结尾<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>    \n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hello\"</span>&gt;</span>单独hello<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>\n            <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">title</span>=<span class=\"string\">\"hellowrold\"</span>&gt;</span>helloworld 不分开<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>            \n        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span>\n    <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span>\n<span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果图：<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/7.png\" alt=\"运行截图7\"></p>\n"},{"title":"js练习题","date":"2016-05-12T15:24:58.000Z","_content":"\n## 适合人群\n > * 有一定的js语言基础\n > * 基础知识不稳固，容易混淆的人\n\n## 题目讲解说明\n首先，下面的的代码均为摘抄，由于是自己的理解，可能有些错误，欢迎指出：\n\n## 题目一\n\n### 代码 \n```javascript\nif (!(\"a\" in window)) {\n    var a = 1;\n}\nalert(a);\n```\n###  运行结果\nundefind\n\n### 知识点说明\n\n代码的理解好像是说，如果window不包含属性a,就声明一个变量a，然后赋值为1。其实这题主要是考了大家几个知识点\n\n - 所有的全局变量都是window的属性，语句 var a = 1;等价于window.a = 1; 你可以用（\"变量名称\" in window）的方式来检测全局变量是否声明。\n - 所有的变量声明都在范围作用域的顶部，这是因为JavaScript引擎首先会扫描所有的变量声明，然后将这些变量声明移动到顶部，就是所谓的变量声明被提升了，但是赋值并不会被提升。var a = 1,可以被分为两句话，变量声明：var a和变量赋值（初始化赋值）：a = 1。\n - 作用域：if并不会产生块级作用域，所以，a是一个全局变量\n\n### 总结\n\n在了解这些知识点后，这个题目就非常清楚了，相当于\n```javascript\nvar a;\nif (!(\"a\" in window)) {\n    a = 1;\n}\nalert(a);\n```\n首先，声明了a,然后判断a是否存在，不存在就赋值为1，很显然a是存在的，所以if判断为false,赋值永远不会执行，所以结果就是undefind。","source":"_posts/js.md","raw":"---\ntitle: js练习题\ndate: 2016-05-12 23:24:58\ntags: [js]\n---\n\n## 适合人群\n > * 有一定的js语言基础\n > * 基础知识不稳固，容易混淆的人\n\n## 题目讲解说明\n首先，下面的的代码均为摘抄，由于是自己的理解，可能有些错误，欢迎指出：\n\n## 题目一\n\n### 代码 \n```javascript\nif (!(\"a\" in window)) {\n    var a = 1;\n}\nalert(a);\n```\n###  运行结果\nundefind\n\n### 知识点说明\n\n代码的理解好像是说，如果window不包含属性a,就声明一个变量a，然后赋值为1。其实这题主要是考了大家几个知识点\n\n - 所有的全局变量都是window的属性，语句 var a = 1;等价于window.a = 1; 你可以用（\"变量名称\" in window）的方式来检测全局变量是否声明。\n - 所有的变量声明都在范围作用域的顶部，这是因为JavaScript引擎首先会扫描所有的变量声明，然后将这些变量声明移动到顶部，就是所谓的变量声明被提升了，但是赋值并不会被提升。var a = 1,可以被分为两句话，变量声明：var a和变量赋值（初始化赋值）：a = 1。\n - 作用域：if并不会产生块级作用域，所以，a是一个全局变量\n\n### 总结\n\n在了解这些知识点后，这个题目就非常清楚了，相当于\n```javascript\nvar a;\nif (!(\"a\" in window)) {\n    a = 1;\n}\nalert(a);\n```\n首先，声明了a,然后判断a是否存在，不存在就赋值为1，很显然a是存在的，所以if判断为false,赋值永远不会执行，所以结果就是undefind。","slug":"js","published":1,"updated":"2017-03-13T07:46:46.870Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqjo0009zss3fflnhb28","content":"<h2 id=\"适合人群\"><a href=\"#适合人群\" class=\"headerlink\" title=\"适合人群\"></a>适合人群</h2><blockquote>\n<ul>\n<li>有一定的js语言基础</li>\n<li>基础知识不稳固，容易混淆的人</li>\n</ul>\n</blockquote>\n<h2 id=\"题目讲解说明\"><a href=\"#题目讲解说明\" class=\"headerlink\" title=\"题目讲解说明\"></a>题目讲解说明</h2><p>首先，下面的的代码均为摘抄，由于是自己的理解，可能有些错误，欢迎指出：</p>\n<h2 id=\"题目一\"><a href=\"#题目一\" class=\"headerlink\" title=\"题目一\"></a>题目一</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"string\">\"a\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">alert(a);</div></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p>undefind</p>\n<h3 id=\"知识点说明\"><a href=\"#知识点说明\" class=\"headerlink\" title=\"知识点说明\"></a>知识点说明</h3><p>代码的理解好像是说，如果window不包含属性a,就声明一个变量a，然后赋值为1。其实这题主要是考了大家几个知识点</p>\n<ul>\n<li>所有的全局变量都是window的属性，语句 var a = 1;等价于window.a = 1; 你可以用（”变量名称” in window）的方式来检测全局变量是否声明。</li>\n<li>所有的变量声明都在范围作用域的顶部，这是因为JavaScript引擎首先会扫描所有的变量声明，然后将这些变量声明移动到顶部，就是所谓的变量声明被提升了，但是赋值并不会被提升。var a = 1,可以被分为两句话，变量声明：var a和变量赋值（初始化赋值）：a = 1。</li>\n<li>作用域：if并不会产生块级作用域，所以，a是一个全局变量</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在了解这些知识点后，这个题目就非常清楚了，相当于<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a;</div><div class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"string\">\"a\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</div><div class=\"line\">    a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">alert(a);</div></pre></td></tr></table></figure></p>\n<p>首先，声明了a,然后判断a是否存在，不存在就赋值为1，很显然a是存在的，所以if判断为false,赋值永远不会执行，所以结果就是undefind。</p>\n","excerpt":"","more":"<h2 id=\"适合人群\"><a href=\"#适合人群\" class=\"headerlink\" title=\"适合人群\"></a>适合人群</h2><blockquote>\n<ul>\n<li>有一定的js语言基础</li>\n<li>基础知识不稳固，容易混淆的人</li>\n</ul>\n</blockquote>\n<h2 id=\"题目讲解说明\"><a href=\"#题目讲解说明\" class=\"headerlink\" title=\"题目讲解说明\"></a>题目讲解说明</h2><p>首先，下面的的代码均为摘抄，由于是自己的理解，可能有些错误，欢迎指出：</p>\n<h2 id=\"题目一\"><a href=\"#题目一\" class=\"headerlink\" title=\"题目一\"></a>题目一</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"string\">\"a\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">alert(a);</div></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p>undefind</p>\n<h3 id=\"知识点说明\"><a href=\"#知识点说明\" class=\"headerlink\" title=\"知识点说明\"></a>知识点说明</h3><p>代码的理解好像是说，如果window不包含属性a,就声明一个变量a，然后赋值为1。其实这题主要是考了大家几个知识点</p>\n<ul>\n<li>所有的全局变量都是window的属性，语句 var a = 1;等价于window.a = 1; 你可以用（”变量名称” in window）的方式来检测全局变量是否声明。</li>\n<li>所有的变量声明都在范围作用域的顶部，这是因为JavaScript引擎首先会扫描所有的变量声明，然后将这些变量声明移动到顶部，就是所谓的变量声明被提升了，但是赋值并不会被提升。var a = 1,可以被分为两句话，变量声明：var a和变量赋值（初始化赋值）：a = 1。</li>\n<li>作用域：if并不会产生块级作用域，所以，a是一个全局变量</li>\n</ul>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>在了解这些知识点后，这个题目就非常清楚了，相当于<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a;</div><div class=\"line\"><span class=\"keyword\">if</span> (!(<span class=\"string\">\"a\"</span> <span class=\"keyword\">in</span> <span class=\"built_in\">window</span>)) &#123;</div><div class=\"line\">    a = <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">alert(a);</div></pre></td></tr></table></figure></p>\n<p>首先，声明了a,然后判断a是否存在，不存在就赋值为1，很显然a是存在的，所以if判断为false,赋值永远不会执行，所以结果就是undefind。</p>\n"},{"title":"js练习题","date":"2016-05-14T14:52:50.000Z","_content":"\n## 适合人群\n > * 有一定的js语言基础\n > * 基础知识不稳固，容易混淆的人\n\n## 题目讲解说明\n接上篇[js练习题](http://leaves.miaoclub.cc/2016/05/13/js1/)，由于是自己的理解，可能有些错误，欢迎指出：\n\n## 题目三\n\n### 代码 \n```javascript\nfunction b(x, y, a) {\n    arguments[2] = 10;\n    alert(a);\n}\nb(1, 2, 3);\n```\n###  运行结果\n10\n\n### 知识点说明\n\n活动对象是在进入函数上下文时刻被创建的，它通过函数的arguments属性初始化。arguments属性的值是Arguments对象：\n\nArguments对象是活动对象的一个属性，它包括如下属性：\n\n >* callee — 指向当前函数的引用\n >* length — 真正传递的参数个数\n >* properties-indexes (字符串类型的整数) 属性的值就是函数的参数值(按参数列表从左到右排列)。 properties-indexes内部元素的个数等于arguments.length. properties-indexes 的值和实际传递进来的参数之间是共享的。\n\n这个共享其实不是真正的共享一个内存地址，而是2个不同的内存地址，使用JavaScript引擎来保证2个值是随时一样的，当然这也有一个前提，那就是这个索引值要小于你传入的参数个数，也就是说如果你只传入2个参数，而还继续使用arguments[2]赋值的话，就会不一致，例如：\n \n```javascript\nfunction b(x, y, a) {\n    arguments[2] = 10;\n    alert(a);\n}\nb(1, 2);\n```\n这时候因为没传递第三个参数a，所以赋值10以后，alert(a)的结果依然是undefined，而不是10，但如下代码弹出的结果依然是10，因为和a没有关系。\n\n### 添加思考\n\n```javascript\nfunction b(x, y, a) {\n    arguments[2] = 10;\n    alert(arguments[2]);\n}\nb(1, 2);\n```\n","source":"_posts/js2.md","raw":"---\ntitle: js练习题\ndate: 2016-05-14 22:52:50\ntags: [js]\n---\n\n## 适合人群\n > * 有一定的js语言基础\n > * 基础知识不稳固，容易混淆的人\n\n## 题目讲解说明\n接上篇[js练习题](http://leaves.miaoclub.cc/2016/05/13/js1/)，由于是自己的理解，可能有些错误，欢迎指出：\n\n## 题目三\n\n### 代码 \n```javascript\nfunction b(x, y, a) {\n    arguments[2] = 10;\n    alert(a);\n}\nb(1, 2, 3);\n```\n###  运行结果\n10\n\n### 知识点说明\n\n活动对象是在进入函数上下文时刻被创建的，它通过函数的arguments属性初始化。arguments属性的值是Arguments对象：\n\nArguments对象是活动对象的一个属性，它包括如下属性：\n\n >* callee — 指向当前函数的引用\n >* length — 真正传递的参数个数\n >* properties-indexes (字符串类型的整数) 属性的值就是函数的参数值(按参数列表从左到右排列)。 properties-indexes内部元素的个数等于arguments.length. properties-indexes 的值和实际传递进来的参数之间是共享的。\n\n这个共享其实不是真正的共享一个内存地址，而是2个不同的内存地址，使用JavaScript引擎来保证2个值是随时一样的，当然这也有一个前提，那就是这个索引值要小于你传入的参数个数，也就是说如果你只传入2个参数，而还继续使用arguments[2]赋值的话，就会不一致，例如：\n \n```javascript\nfunction b(x, y, a) {\n    arguments[2] = 10;\n    alert(a);\n}\nb(1, 2);\n```\n这时候因为没传递第三个参数a，所以赋值10以后，alert(a)的结果依然是undefined，而不是10，但如下代码弹出的结果依然是10，因为和a没有关系。\n\n### 添加思考\n\n```javascript\nfunction b(x, y, a) {\n    arguments[2] = 10;\n    alert(arguments[2]);\n}\nb(1, 2);\n```\n","slug":"js2","published":1,"updated":"2017-03-13T07:46:46.882Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqjp000bzss3fnc3zblv","content":"<h2 id=\"适合人群\"><a href=\"#适合人群\" class=\"headerlink\" title=\"适合人群\"></a>适合人群</h2><blockquote>\n<ul>\n<li>有一定的js语言基础</li>\n<li>基础知识不稳固，容易混淆的人</li>\n</ul>\n</blockquote>\n<h2 id=\"题目讲解说明\"><a href=\"#题目讲解说明\" class=\"headerlink\" title=\"题目讲解说明\"></a>题目讲解说明</h2><p>接上篇<a href=\"http://leaves.miaoclub.cc/2016/05/13/js1/\" target=\"_blank\" rel=\"external\">js练习题</a>，由于是自己的理解，可能有些错误，欢迎指出：</p>\n<h2 id=\"题目三\"><a href=\"#题目三\" class=\"headerlink\" title=\"题目三\"></a>题目三</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x, y, a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</div><div class=\"line\">    alert(a);</div><div class=\"line\">&#125;</div><div class=\"line\">b(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p>10</p>\n<h3 id=\"知识点说明\"><a href=\"#知识点说明\" class=\"headerlink\" title=\"知识点说明\"></a>知识点说明</h3><p>活动对象是在进入函数上下文时刻被创建的，它通过函数的arguments属性初始化。arguments属性的值是Arguments对象：</p>\n<p>Arguments对象是活动对象的一个属性，它包括如下属性：</p>\n<blockquote>\n<ul>\n<li>callee — 指向当前函数的引用</li>\n<li>length — 真正传递的参数个数</li>\n<li>properties-indexes (字符串类型的整数) 属性的值就是函数的参数值(按参数列表从左到右排列)。 properties-indexes内部元素的个数等于arguments.length. properties-indexes 的值和实际传递进来的参数之间是共享的。</li>\n</ul>\n</blockquote>\n<p>这个共享其实不是真正的共享一个内存地址，而是2个不同的内存地址，使用JavaScript引擎来保证2个值是随时一样的，当然这也有一个前提，那就是这个索引值要小于你传入的参数个数，也就是说如果你只传入2个参数，而还继续使用arguments[2]赋值的话，就会不一致，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x, y, a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</div><div class=\"line\">    alert(a);</div><div class=\"line\">&#125;</div><div class=\"line\">b(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div></pre></td></tr></table></figure>\n<p>这时候因为没传递第三个参数a，所以赋值10以后，alert(a)的结果依然是undefined，而不是10，但如下代码弹出的结果依然是10，因为和a没有关系。</p>\n<h3 id=\"添加思考\"><a href=\"#添加思考\" class=\"headerlink\" title=\"添加思考\"></a>添加思考</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x, y, a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</div><div class=\"line\">    alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\">b(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<h2 id=\"适合人群\"><a href=\"#适合人群\" class=\"headerlink\" title=\"适合人群\"></a>适合人群</h2><blockquote>\n<ul>\n<li>有一定的js语言基础</li>\n<li>基础知识不稳固，容易混淆的人</li>\n</ul>\n</blockquote>\n<h2 id=\"题目讲解说明\"><a href=\"#题目讲解说明\" class=\"headerlink\" title=\"题目讲解说明\"></a>题目讲解说明</h2><p>接上篇<a href=\"http://leaves.miaoclub.cc/2016/05/13/js1/\">js练习题</a>，由于是自己的理解，可能有些错误，欢迎指出：</p>\n<h2 id=\"题目三\"><a href=\"#题目三\" class=\"headerlink\" title=\"题目三\"></a>题目三</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x, y, a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</div><div class=\"line\">    alert(a);</div><div class=\"line\">&#125;</div><div class=\"line\">b(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p>10</p>\n<h3 id=\"知识点说明\"><a href=\"#知识点说明\" class=\"headerlink\" title=\"知识点说明\"></a>知识点说明</h3><p>活动对象是在进入函数上下文时刻被创建的，它通过函数的arguments属性初始化。arguments属性的值是Arguments对象：</p>\n<p>Arguments对象是活动对象的一个属性，它包括如下属性：</p>\n<blockquote>\n<ul>\n<li>callee — 指向当前函数的引用</li>\n<li>length — 真正传递的参数个数</li>\n<li>properties-indexes (字符串类型的整数) 属性的值就是函数的参数值(按参数列表从左到右排列)。 properties-indexes内部元素的个数等于arguments.length. properties-indexes 的值和实际传递进来的参数之间是共享的。</li>\n</ul>\n</blockquote>\n<p>这个共享其实不是真正的共享一个内存地址，而是2个不同的内存地址，使用JavaScript引擎来保证2个值是随时一样的，当然这也有一个前提，那就是这个索引值要小于你传入的参数个数，也就是说如果你只传入2个参数，而还继续使用arguments[2]赋值的话，就会不一致，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x, y, a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</div><div class=\"line\">    alert(a);</div><div class=\"line\">&#125;</div><div class=\"line\">b(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div></pre></td></tr></table></figure>\n<p>这时候因为没传递第三个参数a，所以赋值10以后，alert(a)的结果依然是undefined，而不是10，但如下代码弹出的结果依然是10，因为和a没有关系。</p>\n<h3 id=\"添加思考\"><a href=\"#添加思考\" class=\"headerlink\" title=\"添加思考\"></a>添加思考</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\">x, y, a</span>) </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>] = <span class=\"number\">10</span>;</div><div class=\"line\">    alert(<span class=\"built_in\">arguments</span>[<span class=\"number\">2</span>]);</div><div class=\"line\">&#125;</div><div class=\"line\">b(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</div></pre></td></tr></table></figure>\n"},{"title":"面试知识点：HTML5","date":"2016-08-10T12:59:00.000Z","_content":"\n## 随便说两句\n现在的招聘人员啊，招聘要求不写几句html5都不好意思说自己是招前端，结果这个问题的热度也就跟杭城的天气一样，那是居高不下啊。前不久某只犬类动物投简历还问及了，只好炒冷饭，防止自己以后忘记了。 \n\n## 属性举例\n\n### 使用 HTML5 表单和输入框\nHTML5 有很多的新表单属性，很多的小伙伴都已经熟练地掌握了，虽然不是所有的浏览器都支持，但是还是很好用滴：\n>- autofocus 使得页面加载完毕后自动为某个输入框设置输入焦点\n- placeholder 允许你为输入框设置默认文本，并在获取焦点时自动清除\n- required 属性要求必须填写值后才能提交表单\n- pattern 可以通过正则表达式指定输入框允许输入的内容\n\n\n因为这些功能都是内置的，无需使用 JavaScript 方法来实现，第一是节省开发时间，同时也让页面具有更好的适应性。\n\n### 使用 CSS 转换效果\n\n不好意思混入了奸细，使用 CSS 转换效果来替换 JavaScript 的方法可以提升页面元素在两种状态进行转换的速度，通过使用totheleft 和 totheright 你可以迅速移动一个框。例如：\n\n```\ndiv.box { \n\tleft:50px; \n//for webkit browsers \n\t-webkit-transition: all 0.3s ease-out; \n//for mozilla \n\t-moz-transition: all 0.3s ease-out; \n//for opera \n\t-o-transition: all 0.3s ease-out; \n//other browsers \n\ttransition: all 0.3s ease-out;\n}\ndiv.box.totheleft {\n left: 0px;\n}\ndiv.box.totheright {\n left: 80px;\n}\n```\n\n### 使用 HTML5 Web 存储\n当你需要在浏览器上存储一些数据时，你可能会首先考虑到 Cookie，但是 Cookie 在每次浏览器请求时都会附带上。这时 HTML5 更有效的方法就是本地存储 —— Web Storage出现啦，啦啦啦啦~它有两个 Web Storage 对象分别是：sessionStorage 和 localStorage ，这些存储的数据是不会通过 HTTP 请求来传输的，因此不会对请求的时间参数任何影响，下面是一小段示例代码：\n\n```\n//check to see if localstorage is present (browser supports HTML5)\n\tif (('localStorage' in window) && window.localStorage !== null) { \n//store items\n\t \tlocalStorage.wishlist = '[\"Bear\", \"Cow\", \"Pig\"]';\n\t}\n```\n\n从上面代码我们可看到，比使用 Cookie 的方法更加简单，无需指定失效时间。\n\n### 使用 Web Workers\n\nWeb Workers 是 HTML5 规范内容之一，用于提供后台脚本运行支持。相当于是多线程的处理环境。示例代码：\n\n```\nvar worker = new Worker('doWork.js');\nworker.addEventListener('message', function(e) {\n\tconsole.log('Worker said: ', e.data);\n}, false);\nworker.postMessage('Hello World'); // Send data to our worker.\n```\nWeb Workers 可在很多场景下使用，例如图片处理、文本格式和以及大文件接收和处理等等。\n\n### 使用 Web Sockets\n\nWeb Sockets 用来实现跟远程主机的双路通讯，例如在 Web 浏览器和远程服务器之间，这是一个非常轻量级的通讯架构，带宽占用以及性能方面比标准 HTTP 要减少 3~5 倍。因为 Web Sockets 必须使用 80 端口，因此 Web Sockets 不仅用来创建跟快速的通讯接口，还可以在 HTTP 之上实现跟高级的双路通讯。\n目前遇到过使用场景是在线客服。\n\n### 使用应用程序缓存\n应用程序缓存可以让你创建完全支持离线浏览的 Web 应用，降低服务器负载以及更快的体验速度。可通过缓存的 manifest 文件来指定要缓存的文件，manifest 只是一个简单的文本文件，下面是一个示例：\n\n```html\n  CACHE MANIFEST# 2016-08-08:v3\n  #Explicitly cached entries\n  index.htm\n  style.css\n  #offline.htm will be displayed if the user is offline\n  FALLBACK:/ /offline.htm\n```\n你需要在HTML页面中启用缓存\n\n```html\n<html manifest=\"http://www.example.com/example.appcache\">\n  ...\n</html>\n```\nManifest 缓存文件可以定义缓存任意的文件扩展名，但你需要在 Web 服务器上设置对应的 MIME 类型，例如在 Apache 上：\nAddType text/cache-manifest .appcache\n使用应用程序缓存，你只需要简单几步就可以创建离线的 Web 应用，访问是非常快速，适合用来处理一些不经常更新的静态文件。","source":"_posts/page.md","raw":"---\ntitle: 面试知识点：HTML5\ndate: 2016-08-10 20:59:00\ntags: [html,面试]\n---\n\n## 随便说两句\n现在的招聘人员啊，招聘要求不写几句html5都不好意思说自己是招前端，结果这个问题的热度也就跟杭城的天气一样，那是居高不下啊。前不久某只犬类动物投简历还问及了，只好炒冷饭，防止自己以后忘记了。 \n\n## 属性举例\n\n### 使用 HTML5 表单和输入框\nHTML5 有很多的新表单属性，很多的小伙伴都已经熟练地掌握了，虽然不是所有的浏览器都支持，但是还是很好用滴：\n>- autofocus 使得页面加载完毕后自动为某个输入框设置输入焦点\n- placeholder 允许你为输入框设置默认文本，并在获取焦点时自动清除\n- required 属性要求必须填写值后才能提交表单\n- pattern 可以通过正则表达式指定输入框允许输入的内容\n\n\n因为这些功能都是内置的，无需使用 JavaScript 方法来实现，第一是节省开发时间，同时也让页面具有更好的适应性。\n\n### 使用 CSS 转换效果\n\n不好意思混入了奸细，使用 CSS 转换效果来替换 JavaScript 的方法可以提升页面元素在两种状态进行转换的速度，通过使用totheleft 和 totheright 你可以迅速移动一个框。例如：\n\n```\ndiv.box { \n\tleft:50px; \n//for webkit browsers \n\t-webkit-transition: all 0.3s ease-out; \n//for mozilla \n\t-moz-transition: all 0.3s ease-out; \n//for opera \n\t-o-transition: all 0.3s ease-out; \n//other browsers \n\ttransition: all 0.3s ease-out;\n}\ndiv.box.totheleft {\n left: 0px;\n}\ndiv.box.totheright {\n left: 80px;\n}\n```\n\n### 使用 HTML5 Web 存储\n当你需要在浏览器上存储一些数据时，你可能会首先考虑到 Cookie，但是 Cookie 在每次浏览器请求时都会附带上。这时 HTML5 更有效的方法就是本地存储 —— Web Storage出现啦，啦啦啦啦~它有两个 Web Storage 对象分别是：sessionStorage 和 localStorage ，这些存储的数据是不会通过 HTTP 请求来传输的，因此不会对请求的时间参数任何影响，下面是一小段示例代码：\n\n```\n//check to see if localstorage is present (browser supports HTML5)\n\tif (('localStorage' in window) && window.localStorage !== null) { \n//store items\n\t \tlocalStorage.wishlist = '[\"Bear\", \"Cow\", \"Pig\"]';\n\t}\n```\n\n从上面代码我们可看到，比使用 Cookie 的方法更加简单，无需指定失效时间。\n\n### 使用 Web Workers\n\nWeb Workers 是 HTML5 规范内容之一，用于提供后台脚本运行支持。相当于是多线程的处理环境。示例代码：\n\n```\nvar worker = new Worker('doWork.js');\nworker.addEventListener('message', function(e) {\n\tconsole.log('Worker said: ', e.data);\n}, false);\nworker.postMessage('Hello World'); // Send data to our worker.\n```\nWeb Workers 可在很多场景下使用，例如图片处理、文本格式和以及大文件接收和处理等等。\n\n### 使用 Web Sockets\n\nWeb Sockets 用来实现跟远程主机的双路通讯，例如在 Web 浏览器和远程服务器之间，这是一个非常轻量级的通讯架构，带宽占用以及性能方面比标准 HTTP 要减少 3~5 倍。因为 Web Sockets 必须使用 80 端口，因此 Web Sockets 不仅用来创建跟快速的通讯接口，还可以在 HTTP 之上实现跟高级的双路通讯。\n目前遇到过使用场景是在线客服。\n\n### 使用应用程序缓存\n应用程序缓存可以让你创建完全支持离线浏览的 Web 应用，降低服务器负载以及更快的体验速度。可通过缓存的 manifest 文件来指定要缓存的文件，manifest 只是一个简单的文本文件，下面是一个示例：\n\n```html\n  CACHE MANIFEST# 2016-08-08:v3\n  #Explicitly cached entries\n  index.htm\n  style.css\n  #offline.htm will be displayed if the user is offline\n  FALLBACK:/ /offline.htm\n```\n你需要在HTML页面中启用缓存\n\n```html\n<html manifest=\"http://www.example.com/example.appcache\">\n  ...\n</html>\n```\nManifest 缓存文件可以定义缓存任意的文件扩展名，但你需要在 Web 服务器上设置对应的 MIME 类型，例如在 Apache 上：\nAddType text/cache-manifest .appcache\n使用应用程序缓存，你只需要简单几步就可以创建离线的 Web 应用，访问是非常快速，适合用来处理一些不经常更新的静态文件。","slug":"page","published":1,"updated":"2017-03-13T07:46:46.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqjr000ezss3602hf61h","content":"<h2 id=\"随便说两句\"><a href=\"#随便说两句\" class=\"headerlink\" title=\"随便说两句\"></a>随便说两句</h2><p>现在的招聘人员啊，招聘要求不写几句html5都不好意思说自己是招前端，结果这个问题的热度也就跟杭城的天气一样，那是居高不下啊。前不久某只犬类动物投简历还问及了，只好炒冷饭，防止自己以后忘记了。 </p>\n<h2 id=\"属性举例\"><a href=\"#属性举例\" class=\"headerlink\" title=\"属性举例\"></a>属性举例</h2><h3 id=\"使用-HTML5-表单和输入框\"><a href=\"#使用-HTML5-表单和输入框\" class=\"headerlink\" title=\"使用 HTML5 表单和输入框\"></a>使用 HTML5 表单和输入框</h3><p>HTML5 有很多的新表单属性，很多的小伙伴都已经熟练地掌握了，虽然不是所有的浏览器都支持，但是还是很好用滴：</p>\n<blockquote>\n<ul>\n<li>autofocus 使得页面加载完毕后自动为某个输入框设置输入焦点</li>\n<li>placeholder 允许你为输入框设置默认文本，并在获取焦点时自动清除</li>\n<li>required 属性要求必须填写值后才能提交表单</li>\n<li>pattern 可以通过正则表达式指定输入框允许输入的内容</li>\n</ul>\n</blockquote>\n<p>因为这些功能都是内置的，无需使用 JavaScript 方法来实现，第一是节省开发时间，同时也让页面具有更好的适应性。</p>\n<h3 id=\"使用-CSS-转换效果\"><a href=\"#使用-CSS-转换效果\" class=\"headerlink\" title=\"使用 CSS 转换效果\"></a>使用 CSS 转换效果</h3><p>不好意思混入了奸细，使用 CSS 转换效果来替换 JavaScript 的方法可以提升页面元素在两种状态进行转换的速度，通过使用totheleft 和 totheright 你可以迅速移动一个框。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">div.box &#123; </div><div class=\"line\">\tleft:50px; </div><div class=\"line\">//for webkit browsers </div><div class=\"line\">\t-webkit-transition: all 0.3s ease-out; </div><div class=\"line\">//for mozilla </div><div class=\"line\">\t-moz-transition: all 0.3s ease-out; </div><div class=\"line\">//for opera </div><div class=\"line\">\t-o-transition: all 0.3s ease-out; </div><div class=\"line\">//other browsers </div><div class=\"line\">\ttransition: all 0.3s ease-out;</div><div class=\"line\">&#125;</div><div class=\"line\">div.box.totheleft &#123;</div><div class=\"line\"> left: 0px;</div><div class=\"line\">&#125;</div><div class=\"line\">div.box.totheright &#123;</div><div class=\"line\"> left: 80px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用-HTML5-Web-存储\"><a href=\"#使用-HTML5-Web-存储\" class=\"headerlink\" title=\"使用 HTML5 Web 存储\"></a>使用 HTML5 Web 存储</h3><p>当你需要在浏览器上存储一些数据时，你可能会首先考虑到 Cookie，但是 Cookie 在每次浏览器请求时都会附带上。这时 HTML5 更有效的方法就是本地存储 —— Web Storage出现啦，啦啦啦啦~它有两个 Web Storage 对象分别是：sessionStorage 和 localStorage ，这些存储的数据是不会通过 HTTP 请求来传输的，因此不会对请求的时间参数任何影响，下面是一小段示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//check to see if localstorage is present (browser supports HTML5)</div><div class=\"line\">\tif ((&apos;localStorage&apos; in window) &amp;&amp; window.localStorage !== null) &#123; </div><div class=\"line\">//store items</div><div class=\"line\">\t \tlocalStorage.wishlist = &apos;[&quot;Bear&quot;, &quot;Cow&quot;, &quot;Pig&quot;]&apos;;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>从上面代码我们可看到，比使用 Cookie 的方法更加简单，无需指定失效时间。</p>\n<h3 id=\"使用-Web-Workers\"><a href=\"#使用-Web-Workers\" class=\"headerlink\" title=\"使用 Web Workers\"></a>使用 Web Workers</h3><p>Web Workers 是 HTML5 规范内容之一，用于提供后台脚本运行支持。相当于是多线程的处理环境。示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var worker = new Worker(&apos;doWork.js&apos;);</div><div class=\"line\">worker.addEventListener(&apos;message&apos;, function(e) &#123;</div><div class=\"line\">\tconsole.log(&apos;Worker said: &apos;, e.data);</div><div class=\"line\">&#125;, false);</div><div class=\"line\">worker.postMessage(&apos;Hello World&apos;); // Send data to our worker.</div></pre></td></tr></table></figure>\n<p>Web Workers 可在很多场景下使用，例如图片处理、文本格式和以及大文件接收和处理等等。</p>\n<h3 id=\"使用-Web-Sockets\"><a href=\"#使用-Web-Sockets\" class=\"headerlink\" title=\"使用 Web Sockets\"></a>使用 Web Sockets</h3><p>Web Sockets 用来实现跟远程主机的双路通讯，例如在 Web 浏览器和远程服务器之间，这是一个非常轻量级的通讯架构，带宽占用以及性能方面比标准 HTTP 要减少 3~5 倍。因为 Web Sockets 必须使用 80 端口，因此 Web Sockets 不仅用来创建跟快速的通讯接口，还可以在 HTTP 之上实现跟高级的双路通讯。<br>目前遇到过使用场景是在线客服。</p>\n<h3 id=\"使用应用程序缓存\"><a href=\"#使用应用程序缓存\" class=\"headerlink\" title=\"使用应用程序缓存\"></a>使用应用程序缓存</h3><p>应用程序缓存可以让你创建完全支持离线浏览的 Web 应用，降低服务器负载以及更快的体验速度。可通过缓存的 manifest 文件来指定要缓存的文件，manifest 只是一个简单的文本文件，下面是一个示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">CACHE MANIFEST# 2016-08-08:v3</div><div class=\"line\">#Explicitly cached entries</div><div class=\"line\">index.htm</div><div class=\"line\">style.css</div><div class=\"line\">#offline.htm will be displayed if the user is offline</div><div class=\"line\">FALLBACK:/ /offline.htm</div></pre></td></tr></table></figure>\n<p>你需要在HTML页面中启用缓存</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"http://www.example.com/example.appcache\"</span>&gt;</span></div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Manifest 缓存文件可以定义缓存任意的文件扩展名，但你需要在 Web 服务器上设置对应的 MIME 类型，例如在 Apache 上：<br>AddType text/cache-manifest .appcache<br>使用应用程序缓存，你只需要简单几步就可以创建离线的 Web 应用，访问是非常快速，适合用来处理一些不经常更新的静态文件。</p>\n","excerpt":"","more":"<h2 id=\"随便说两句\"><a href=\"#随便说两句\" class=\"headerlink\" title=\"随便说两句\"></a>随便说两句</h2><p>现在的招聘人员啊，招聘要求不写几句html5都不好意思说自己是招前端，结果这个问题的热度也就跟杭城的天气一样，那是居高不下啊。前不久某只犬类动物投简历还问及了，只好炒冷饭，防止自己以后忘记了。 </p>\n<h2 id=\"属性举例\"><a href=\"#属性举例\" class=\"headerlink\" title=\"属性举例\"></a>属性举例</h2><h3 id=\"使用-HTML5-表单和输入框\"><a href=\"#使用-HTML5-表单和输入框\" class=\"headerlink\" title=\"使用 HTML5 表单和输入框\"></a>使用 HTML5 表单和输入框</h3><p>HTML5 有很多的新表单属性，很多的小伙伴都已经熟练地掌握了，虽然不是所有的浏览器都支持，但是还是很好用滴：</p>\n<blockquote>\n<ul>\n<li>autofocus 使得页面加载完毕后自动为某个输入框设置输入焦点</li>\n<li>placeholder 允许你为输入框设置默认文本，并在获取焦点时自动清除</li>\n<li>required 属性要求必须填写值后才能提交表单</li>\n<li>pattern 可以通过正则表达式指定输入框允许输入的内容</li>\n</ul>\n</blockquote>\n<p>因为这些功能都是内置的，无需使用 JavaScript 方法来实现，第一是节省开发时间，同时也让页面具有更好的适应性。</p>\n<h3 id=\"使用-CSS-转换效果\"><a href=\"#使用-CSS-转换效果\" class=\"headerlink\" title=\"使用 CSS 转换效果\"></a>使用 CSS 转换效果</h3><p>不好意思混入了奸细，使用 CSS 转换效果来替换 JavaScript 的方法可以提升页面元素在两种状态进行转换的速度，通过使用totheleft 和 totheright 你可以迅速移动一个框。例如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">div.box &#123; </div><div class=\"line\">\tleft:50px; </div><div class=\"line\">//for webkit browsers </div><div class=\"line\">\t-webkit-transition: all 0.3s ease-out; </div><div class=\"line\">//for mozilla </div><div class=\"line\">\t-moz-transition: all 0.3s ease-out; </div><div class=\"line\">//for opera </div><div class=\"line\">\t-o-transition: all 0.3s ease-out; </div><div class=\"line\">//other browsers </div><div class=\"line\">\ttransition: all 0.3s ease-out;</div><div class=\"line\">&#125;</div><div class=\"line\">div.box.totheleft &#123;</div><div class=\"line\"> left: 0px;</div><div class=\"line\">&#125;</div><div class=\"line\">div.box.totheright &#123;</div><div class=\"line\"> left: 80px;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"使用-HTML5-Web-存储\"><a href=\"#使用-HTML5-Web-存储\" class=\"headerlink\" title=\"使用 HTML5 Web 存储\"></a>使用 HTML5 Web 存储</h3><p>当你需要在浏览器上存储一些数据时，你可能会首先考虑到 Cookie，但是 Cookie 在每次浏览器请求时都会附带上。这时 HTML5 更有效的方法就是本地存储 —— Web Storage出现啦，啦啦啦啦~它有两个 Web Storage 对象分别是：sessionStorage 和 localStorage ，这些存储的数据是不会通过 HTTP 请求来传输的，因此不会对请求的时间参数任何影响，下面是一小段示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//check to see if localstorage is present (browser supports HTML5)</div><div class=\"line\">\tif ((&apos;localStorage&apos; in window) &amp;&amp; window.localStorage !== null) &#123; </div><div class=\"line\">//store items</div><div class=\"line\">\t \tlocalStorage.wishlist = &apos;[&quot;Bear&quot;, &quot;Cow&quot;, &quot;Pig&quot;]&apos;;</div><div class=\"line\">\t&#125;</div></pre></td></tr></table></figure>\n<p>从上面代码我们可看到，比使用 Cookie 的方法更加简单，无需指定失效时间。</p>\n<h3 id=\"使用-Web-Workers\"><a href=\"#使用-Web-Workers\" class=\"headerlink\" title=\"使用 Web Workers\"></a>使用 Web Workers</h3><p>Web Workers 是 HTML5 规范内容之一，用于提供后台脚本运行支持。相当于是多线程的处理环境。示例代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">var worker = new Worker(&apos;doWork.js&apos;);</div><div class=\"line\">worker.addEventListener(&apos;message&apos;, function(e) &#123;</div><div class=\"line\">\tconsole.log(&apos;Worker said: &apos;, e.data);</div><div class=\"line\">&#125;, false);</div><div class=\"line\">worker.postMessage(&apos;Hello World&apos;); // Send data to our worker.</div></pre></td></tr></table></figure>\n<p>Web Workers 可在很多场景下使用，例如图片处理、文本格式和以及大文件接收和处理等等。</p>\n<h3 id=\"使用-Web-Sockets\"><a href=\"#使用-Web-Sockets\" class=\"headerlink\" title=\"使用 Web Sockets\"></a>使用 Web Sockets</h3><p>Web Sockets 用来实现跟远程主机的双路通讯，例如在 Web 浏览器和远程服务器之间，这是一个非常轻量级的通讯架构，带宽占用以及性能方面比标准 HTTP 要减少 3~5 倍。因为 Web Sockets 必须使用 80 端口，因此 Web Sockets 不仅用来创建跟快速的通讯接口，还可以在 HTTP 之上实现跟高级的双路通讯。<br>目前遇到过使用场景是在线客服。</p>\n<h3 id=\"使用应用程序缓存\"><a href=\"#使用应用程序缓存\" class=\"headerlink\" title=\"使用应用程序缓存\"></a>使用应用程序缓存</h3><p>应用程序缓存可以让你创建完全支持离线浏览的 Web 应用，降低服务器负载以及更快的体验速度。可通过缓存的 manifest 文件来指定要缓存的文件，manifest 只是一个简单的文本文件，下面是一个示例：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">CACHE MANIFEST# 2016-08-08:v3</div><div class=\"line\">#Explicitly cached entries</div><div class=\"line\">index.htm</div><div class=\"line\">style.css</div><div class=\"line\">#offline.htm will be displayed if the user is offline</div><div class=\"line\">FALLBACK:/ /offline.htm</div></pre></td></tr></table></figure>\n<p>你需要在HTML页面中启用缓存</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">manifest</span>=<span class=\"string\">\"http://www.example.com/example.appcache\"</span>&gt;</span></div><div class=\"line\">  ...</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Manifest 缓存文件可以定义缓存任意的文件扩展名，但你需要在 Web 服务器上设置对应的 MIME 类型，例如在 Apache 上：<br>AddType text/cache-manifest .appcache<br>使用应用程序缓存，你只需要简单几步就可以创建离线的 Web 应用，访问是非常快速，适合用来处理一些不经常更新的静态文件。</p>\n"},{"title":"js练习题","date":"2016-05-13T03:19:24.000Z","_content":"\n## 适合人群\n > * 有一定的js语言基础\n > * 基础知识不稳固，容易混淆的人\n\n## 题目讲解说明\n接上篇[js练习题](http://leaves.miaoclub.cc/2016/05/12/js/)，由于是自己的理解，可能有些错误，欢迎指出：\n\n## 题目二\n\n### 代码 \n```javascript\nvar a = 1,\n    b = function a(x) {\n        x && a(--x);\n    };\nalert(a);\n```\n###  运行结果\n1\n\n### 知识点说明\n\n这个题目看起来比实际复杂，alert的结果是1；这里依然有3个重要的概念需要我们知道。\n\n - 上篇我们知道了变量声明在进入执行上下文就完成了，其实函数声明也是提前的，所有的函数声明都在执行代码之前都已经完成了声明，和变量声明一样。\n\n - 函数声明和函数表达式的区别，澄清一下，函数声明是如下这样的代码：\n \n```javascript\nfunction functionName(arg1, arg2){\n    //函数体\n}\n```\n如下不是函数，而是函数表达式，相当于变量赋值(函数表达式没有提前，就相当于平时的变量赋值。)：\n\n```javascript\nvar functionName = function(arg1, arg2){\n    //函数体\n};\n```\n\n - 函数声明会覆盖变量声明，但不会覆盖变量赋值，这个可能不好理解，我们来看个例子\n \n```javascript\nfunction value(){\n    return 1;\n}\nvar value;\nalert(typeof value);    //\"function\"\n```\n尽快变量声明在下面定义，但是变量value依然是function，也就是说这种情况下，函数声明的优先级高于变量声明的优先级（函数的形参 > 函数申明 > 变量申明），但如果该变量value赋值了，那结果就完全不一样了：\n\n```javascript\nfunction value(){\n    return 1;\n}\nvar value = 1;\nalert(typeof value);    //\"number\"\n```\n该value赋值以后，变量赋值初始化就覆盖了函数声明。\n\n### 添加思考\n\n针对上面的举例，假如将alert(typeof value);改为alert(typeof value（）);答案将是，第一种情况，number，因为是返回的数字，第二种情况报错，因为value()不是一个方法。\n \n\n### 总结\n\n理解清楚内容后，可以更为理解的表达为\n\n```javascript\nvar a = 1,\n    b = function(x) {\n        x && b(--x);\n    };\nalert(a);\n```\n这个函数其实是一个有名函数表达式，函数表达式不像函数声明一样可以覆盖变量声明，但你可以注意到，变量b是包含了该函数表达式，而该函数表达式的名字是a；不同的浏览器对a这个名词处理有点不一样，在IE里，会将a认为函数声明，所以它被变量初始化覆盖了，就是说如果调用a(--x)的话就会出错，而其它浏览器在允许在函数内部调用a(--x)，因为这时候a在函数外面依然是数字。基本上，IE里调用b(2)的时候会出错，但其它浏览器则返回undefined。\n","source":"_posts/js1.md","raw":"---\ntitle: js练习题\ndate: 2016-05-13 11:19:24\ntags: [js]\n---\n\n## 适合人群\n > * 有一定的js语言基础\n > * 基础知识不稳固，容易混淆的人\n\n## 题目讲解说明\n接上篇[js练习题](http://leaves.miaoclub.cc/2016/05/12/js/)，由于是自己的理解，可能有些错误，欢迎指出：\n\n## 题目二\n\n### 代码 \n```javascript\nvar a = 1,\n    b = function a(x) {\n        x && a(--x);\n    };\nalert(a);\n```\n###  运行结果\n1\n\n### 知识点说明\n\n这个题目看起来比实际复杂，alert的结果是1；这里依然有3个重要的概念需要我们知道。\n\n - 上篇我们知道了变量声明在进入执行上下文就完成了，其实函数声明也是提前的，所有的函数声明都在执行代码之前都已经完成了声明，和变量声明一样。\n\n - 函数声明和函数表达式的区别，澄清一下，函数声明是如下这样的代码：\n \n```javascript\nfunction functionName(arg1, arg2){\n    //函数体\n}\n```\n如下不是函数，而是函数表达式，相当于变量赋值(函数表达式没有提前，就相当于平时的变量赋值。)：\n\n```javascript\nvar functionName = function(arg1, arg2){\n    //函数体\n};\n```\n\n - 函数声明会覆盖变量声明，但不会覆盖变量赋值，这个可能不好理解，我们来看个例子\n \n```javascript\nfunction value(){\n    return 1;\n}\nvar value;\nalert(typeof value);    //\"function\"\n```\n尽快变量声明在下面定义，但是变量value依然是function，也就是说这种情况下，函数声明的优先级高于变量声明的优先级（函数的形参 > 函数申明 > 变量申明），但如果该变量value赋值了，那结果就完全不一样了：\n\n```javascript\nfunction value(){\n    return 1;\n}\nvar value = 1;\nalert(typeof value);    //\"number\"\n```\n该value赋值以后，变量赋值初始化就覆盖了函数声明。\n\n### 添加思考\n\n针对上面的举例，假如将alert(typeof value);改为alert(typeof value（）);答案将是，第一种情况，number，因为是返回的数字，第二种情况报错，因为value()不是一个方法。\n \n\n### 总结\n\n理解清楚内容后，可以更为理解的表达为\n\n```javascript\nvar a = 1,\n    b = function(x) {\n        x && b(--x);\n    };\nalert(a);\n```\n这个函数其实是一个有名函数表达式，函数表达式不像函数声明一样可以覆盖变量声明，但你可以注意到，变量b是包含了该函数表达式，而该函数表达式的名字是a；不同的浏览器对a这个名词处理有点不一样，在IE里，会将a认为函数声明，所以它被变量初始化覆盖了，就是说如果调用a(--x)的话就会出错，而其它浏览器在允许在函数内部调用a(--x)，因为这时候a在函数外面依然是数字。基本上，IE里调用b(2)的时候会出错，但其它浏览器则返回undefined。\n","slug":"js1","published":1,"updated":"2017-03-13T07:46:46.877Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqjs000gzss3wlwq1ba9","content":"<h2 id=\"适合人群\"><a href=\"#适合人群\" class=\"headerlink\" title=\"适合人群\"></a>适合人群</h2><blockquote>\n<ul>\n<li>有一定的js语言基础</li>\n<li>基础知识不稳固，容易混淆的人</li>\n</ul>\n</blockquote>\n<h2 id=\"题目讲解说明\"><a href=\"#题目讲解说明\" class=\"headerlink\" title=\"题目讲解说明\"></a>题目讲解说明</h2><p>接上篇<a href=\"http://leaves.miaoclub.cc/2016/05/12/js/\" target=\"_blank\" rel=\"external\">js练习题</a>，由于是自己的理解，可能有些错误，欢迎指出：</p>\n<h2 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二\"></a>题目二</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</div><div class=\"line\">    b = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">        x &amp;&amp; a(--x);</div><div class=\"line\">    &#125;;</div><div class=\"line\">alert(a);</div></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p>1</p>\n<h3 id=\"知识点说明\"><a href=\"#知识点说明\" class=\"headerlink\" title=\"知识点说明\"></a>知识点说明</h3><p>这个题目看起来比实际复杂，alert的结果是1；这里依然有3个重要的概念需要我们知道。</p>\n<ul>\n<li><p>上篇我们知道了变量声明在进入执行上下文就完成了，其实函数声明也是提前的，所有的函数声明都在执行代码之前都已经完成了声明，和变量声明一样。</p>\n</li>\n<li><p>函数声明和函数表达式的区别，澄清一下，函数声明是如下这样的代码：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionName</span>(<span class=\"params\">arg1, arg2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如下不是函数，而是函数表达式，相当于变量赋值(函数表达式没有提前，就相当于平时的变量赋值。)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> functionName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>函数声明会覆盖变量声明，但不会覆盖变量赋值，这个可能不好理解，我们来看个例子</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">value</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> value;</div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> value);    <span class=\"comment\">//\"function\"</span></div></pre></td></tr></table></figure>\n<p>尽快变量声明在下面定义，但是变量value依然是function，也就是说这种情况下，函数声明的优先级高于变量声明的优先级（函数的形参 &gt; 函数申明 &gt; 变量申明），但如果该变量value赋值了，那结果就完全不一样了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">value</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">1</span>;</div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> value);    <span class=\"comment\">//\"number\"</span></div></pre></td></tr></table></figure>\n<p>该value赋值以后，变量赋值初始化就覆盖了函数声明。</p>\n<h3 id=\"添加思考\"><a href=\"#添加思考\" class=\"headerlink\" title=\"添加思考\"></a>添加思考</h3><p>针对上面的举例，假如将alert(typeof value);改为alert(typeof value（）);答案将是，第一种情况，number，因为是返回的数字，第二种情况报错，因为value()不是一个方法。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>理解清楚内容后，可以更为理解的表达为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</div><div class=\"line\">    b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">        x &amp;&amp; b(--x);</div><div class=\"line\">    &#125;;</div><div class=\"line\">alert(a);</div></pre></td></tr></table></figure>\n<p>这个函数其实是一个有名函数表达式，函数表达式不像函数声明一样可以覆盖变量声明，但你可以注意到，变量b是包含了该函数表达式，而该函数表达式的名字是a；不同的浏览器对a这个名词处理有点不一样，在IE里，会将a认为函数声明，所以它被变量初始化覆盖了，就是说如果调用a(–x)的话就会出错，而其它浏览器在允许在函数内部调用a(–x)，因为这时候a在函数外面依然是数字。基本上，IE里调用b(2)的时候会出错，但其它浏览器则返回undefined。</p>\n","excerpt":"","more":"<h2 id=\"适合人群\"><a href=\"#适合人群\" class=\"headerlink\" title=\"适合人群\"></a>适合人群</h2><blockquote>\n<ul>\n<li>有一定的js语言基础</li>\n<li>基础知识不稳固，容易混淆的人</li>\n</ul>\n</blockquote>\n<h2 id=\"题目讲解说明\"><a href=\"#题目讲解说明\" class=\"headerlink\" title=\"题目讲解说明\"></a>题目讲解说明</h2><p>接上篇<a href=\"http://leaves.miaoclub.cc/2016/05/12/js/\">js练习题</a>，由于是自己的理解，可能有些错误，欢迎指出：</p>\n<h2 id=\"题目二\"><a href=\"#题目二\" class=\"headerlink\" title=\"题目二\"></a>题目二</h2><h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</div><div class=\"line\">    b = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">        x &amp;&amp; a(--x);</div><div class=\"line\">    &#125;;</div><div class=\"line\">alert(a);</div></pre></td></tr></table></figure>\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><p>1</p>\n<h3 id=\"知识点说明\"><a href=\"#知识点说明\" class=\"headerlink\" title=\"知识点说明\"></a>知识点说明</h3><p>这个题目看起来比实际复杂，alert的结果是1；这里依然有3个重要的概念需要我们知道。</p>\n<ul>\n<li><p>上篇我们知道了变量声明在进入执行上下文就完成了，其实函数声明也是提前的，所有的函数声明都在执行代码之前都已经完成了声明，和变量声明一样。</p>\n</li>\n<li><p>函数声明和函数表达式的区别，澄清一下，函数声明是如下这样的代码：</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">functionName</span>(<span class=\"params\">arg1, arg2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>如下不是函数，而是函数表达式，相当于变量赋值(函数表达式没有提前，就相当于平时的变量赋值。)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> functionName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">arg1, arg2</span>)</span>&#123;</div><div class=\"line\">    <span class=\"comment\">//函数体</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<ul>\n<li>函数声明会覆盖变量声明，但不会覆盖变量赋值，这个可能不好理解，我们来看个例子</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">value</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> value;</div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> value);    <span class=\"comment\">//\"function\"</span></div></pre></td></tr></table></figure>\n<p>尽快变量声明在下面定义，但是变量value依然是function，也就是说这种情况下，函数声明的优先级高于变量声明的优先级（函数的形参 &gt; 函数申明 &gt; 变量申明），但如果该变量value赋值了，那结果就完全不一样了：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">value</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> value = <span class=\"number\">1</span>;</div><div class=\"line\">alert(<span class=\"keyword\">typeof</span> value);    <span class=\"comment\">//\"number\"</span></div></pre></td></tr></table></figure>\n<p>该value赋值以后，变量赋值初始化就覆盖了函数声明。</p>\n<h3 id=\"添加思考\"><a href=\"#添加思考\" class=\"headerlink\" title=\"添加思考\"></a>添加思考</h3><p>针对上面的举例，假如将alert(typeof value);改为alert(typeof value（）);答案将是，第一种情况，number，因为是返回的数字，第二种情况报错，因为value()不是一个方法。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>理解清楚内容后，可以更为理解的表达为</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>,</div><div class=\"line\">    b = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">x</span>) </span>&#123;</div><div class=\"line\">        x &amp;&amp; b(--x);</div><div class=\"line\">    &#125;;</div><div class=\"line\">alert(a);</div></pre></td></tr></table></figure>\n<p>这个函数其实是一个有名函数表达式，函数表达式不像函数声明一样可以覆盖变量声明，但你可以注意到，变量b是包含了该函数表达式，而该函数表达式的名字是a；不同的浏览器对a这个名词处理有点不一样，在IE里，会将a认为函数声明，所以它被变量初始化覆盖了，就是说如果调用a(–x)的话就会出错，而其它浏览器在允许在函数内部调用a(–x)，因为这时候a在函数外面依然是数字。基本上，IE里调用b(2)的时候会出错，但其它浏览器则返回undefined。</p>\n"},{"title":"面试知识点：http","date":"2016-08-11T12:23:12.000Z","_content":"\n## 随便说两句\n这个问题呢，其实遇到的并不多，常见的是一些笔试题，但是对于调试还是很重要的，所以也分出一章来记录一下，免得忘记，专门系统的整理和说明一下。\n\n## 概要说明\n\n状态码 | 类型 | 原因短语\n-----|------ |-------\n1xx|informational(信息性状态码) |接受的请求正在处理  \n2xx|success(成功状态码) | 请求正常处理完毕\n3xx|redirection(重定向状态码) | 需要进行附加操作以完成请求 \n4xx|client error(客户端错误状态码) | 服务器无法处理请求\n5xx|server error(服务器错误状态码) | 服务器处理请求失败\n\n### 具体说明：2xx\n>- 200 :ok，请求正常处理\n- 204：no content,请求处理成功，但没与资源可返回\n- 206： partical content,对某一范围进行请求\n\n### 具体说明：3xx\n>- 301 :moved permanently,永久性重定向，请求的资源已经被分配了新的URI，以后应使用资源现在所指向的URI。\n- 302：found,临时性重定向，请求的资源已经被分配了新的URI，希望用户本次能使用新的URI访问。\n- 303：see other,请求的资源存在另外一个URI，应使用GET方法定向获取请求的资源\n- 304：not modified,与重定向无关，是指客户端发送附带条件的请求时，服务器端允许请求访问资源，但发送的请求未满足条件\n- 307：temporary redirect,临时重定向，与302相似，但是302遵守浏览器规范，不会从POST变成GET\n\n### 具体说明：4xx\n>- 400 :bad request,请求报文存在语法错误\n- 401：unauthorized,发送的请求需要有通过HTTP认证的认证信息\n- 403：forbidden,对请求资源的访问被服务器拒绝了，例如权限问题，系统授权等\n- 404：not found,服务器上无法找到请求的资源\n\n### 具体说明：5xx\n\n>- 500 :internal server error,服务器在执行请求时发生了错误\n- 503：service unavailable,服务器暂时处于超负载或正在进行停机维护，现在无法处理请求\n\n## 扯句题外话\n\n### 当在浏览器中输入一个url后回车，后台发生了什么？\n第一种简单的说呢就是这样的：\n第一步：客户机提出域名解析请求,并将该请求发送给本地的域名服务器。\n第二步：当本地的域名服务器收到请求后,就先查询本地的缓存,如果有该纪录项,则本地的域名服务器就直接把查询的结果返回。\n第三步：如果本地的缓存中没有该纪录,则本地域名服务器就直接把请求发给根域名服务器,然后根域名服务器再返回给本地域名服务器一个所查询域(根的子域)的主域名服务器的地址。\n第四步：本地服务器再向上一步返回的域名服务器发送请求,然后接受请求的服务器查询自己的缓存,如果没有该纪录,则返回相关的下级的域名服务器的地址。\n第五步：重复第四步,直到找到正确的纪录。\n### 面试官会问的详细重点\n这个在网上其实已经有很多的详细说明了，我就记录一个别人的博客地址[从输入网址到显示网页的全过程分析](http://blog.csdn.net/saiwaifeike/article/details/8789624)","source":"_posts/http.md","raw":"---\ntitle: 面试知识点：http\ndate: 2016-08-11 20:23:12\ntags: [http,面试,浏览器]\n---\n\n## 随便说两句\n这个问题呢，其实遇到的并不多，常见的是一些笔试题，但是对于调试还是很重要的，所以也分出一章来记录一下，免得忘记，专门系统的整理和说明一下。\n\n## 概要说明\n\n状态码 | 类型 | 原因短语\n-----|------ |-------\n1xx|informational(信息性状态码) |接受的请求正在处理  \n2xx|success(成功状态码) | 请求正常处理完毕\n3xx|redirection(重定向状态码) | 需要进行附加操作以完成请求 \n4xx|client error(客户端错误状态码) | 服务器无法处理请求\n5xx|server error(服务器错误状态码) | 服务器处理请求失败\n\n### 具体说明：2xx\n>- 200 :ok，请求正常处理\n- 204：no content,请求处理成功，但没与资源可返回\n- 206： partical content,对某一范围进行请求\n\n### 具体说明：3xx\n>- 301 :moved permanently,永久性重定向，请求的资源已经被分配了新的URI，以后应使用资源现在所指向的URI。\n- 302：found,临时性重定向，请求的资源已经被分配了新的URI，希望用户本次能使用新的URI访问。\n- 303：see other,请求的资源存在另外一个URI，应使用GET方法定向获取请求的资源\n- 304：not modified,与重定向无关，是指客户端发送附带条件的请求时，服务器端允许请求访问资源，但发送的请求未满足条件\n- 307：temporary redirect,临时重定向，与302相似，但是302遵守浏览器规范，不会从POST变成GET\n\n### 具体说明：4xx\n>- 400 :bad request,请求报文存在语法错误\n- 401：unauthorized,发送的请求需要有通过HTTP认证的认证信息\n- 403：forbidden,对请求资源的访问被服务器拒绝了，例如权限问题，系统授权等\n- 404：not found,服务器上无法找到请求的资源\n\n### 具体说明：5xx\n\n>- 500 :internal server error,服务器在执行请求时发生了错误\n- 503：service unavailable,服务器暂时处于超负载或正在进行停机维护，现在无法处理请求\n\n## 扯句题外话\n\n### 当在浏览器中输入一个url后回车，后台发生了什么？\n第一种简单的说呢就是这样的：\n第一步：客户机提出域名解析请求,并将该请求发送给本地的域名服务器。\n第二步：当本地的域名服务器收到请求后,就先查询本地的缓存,如果有该纪录项,则本地的域名服务器就直接把查询的结果返回。\n第三步：如果本地的缓存中没有该纪录,则本地域名服务器就直接把请求发给根域名服务器,然后根域名服务器再返回给本地域名服务器一个所查询域(根的子域)的主域名服务器的地址。\n第四步：本地服务器再向上一步返回的域名服务器发送请求,然后接受请求的服务器查询自己的缓存,如果没有该纪录,则返回相关的下级的域名服务器的地址。\n第五步：重复第四步,直到找到正确的纪录。\n### 面试官会问的详细重点\n这个在网上其实已经有很多的详细说明了，我就记录一个别人的博客地址[从输入网址到显示网页的全过程分析](http://blog.csdn.net/saiwaifeike/article/details/8789624)","slug":"http","published":1,"updated":"2017-03-13T07:46:46.866Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqjw000jzss38t52q771","content":"<h2 id=\"随便说两句\"><a href=\"#随便说两句\" class=\"headerlink\" title=\"随便说两句\"></a>随便说两句</h2><p>这个问题呢，其实遇到的并不多，常见的是一些笔试题，但是对于调试还是很重要的，所以也分出一章来记录一下，免得忘记，专门系统的整理和说明一下。</p>\n<h2 id=\"概要说明\"><a href=\"#概要说明\" class=\"headerlink\" title=\"概要说明\"></a>概要说明</h2><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>类型</th>\n<th>原因短语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>informational(信息性状态码)</td>\n<td>接受的请求正在处理  </td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>success(成功状态码)</td>\n<td>请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>redirection(重定向状态码)</td>\n<td>需要进行附加操作以完成请求 </td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>client error(客户端错误状态码)</td>\n<td>服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>server error(服务器错误状态码)</td>\n<td>服务器处理请求失败</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"具体说明：2xx\"><a href=\"#具体说明：2xx\" class=\"headerlink\" title=\"具体说明：2xx\"></a>具体说明：2xx</h3><blockquote>\n<ul>\n<li>200 :ok，请求正常处理</li>\n<li>204：no content,请求处理成功，但没与资源可返回</li>\n<li>206： partical content,对某一范围进行请求</li>\n</ul>\n</blockquote>\n<h3 id=\"具体说明：3xx\"><a href=\"#具体说明：3xx\" class=\"headerlink\" title=\"具体说明：3xx\"></a>具体说明：3xx</h3><blockquote>\n<ul>\n<li>301 :moved permanently,永久性重定向，请求的资源已经被分配了新的URI，以后应使用资源现在所指向的URI。</li>\n<li>302：found,临时性重定向，请求的资源已经被分配了新的URI，希望用户本次能使用新的URI访问。</li>\n<li>303：see other,请求的资源存在另外一个URI，应使用GET方法定向获取请求的资源</li>\n<li>304：not modified,与重定向无关，是指客户端发送附带条件的请求时，服务器端允许请求访问资源，但发送的请求未满足条件</li>\n<li>307：temporary redirect,临时重定向，与302相似，但是302遵守浏览器规范，不会从POST变成GET</li>\n</ul>\n</blockquote>\n<h3 id=\"具体说明：4xx\"><a href=\"#具体说明：4xx\" class=\"headerlink\" title=\"具体说明：4xx\"></a>具体说明：4xx</h3><blockquote>\n<ul>\n<li>400 :bad request,请求报文存在语法错误</li>\n<li>401：unauthorized,发送的请求需要有通过HTTP认证的认证信息</li>\n<li>403：forbidden,对请求资源的访问被服务器拒绝了，例如权限问题，系统授权等</li>\n<li>404：not found,服务器上无法找到请求的资源</li>\n</ul>\n</blockquote>\n<h3 id=\"具体说明：5xx\"><a href=\"#具体说明：5xx\" class=\"headerlink\" title=\"具体说明：5xx\"></a>具体说明：5xx</h3><blockquote>\n<ul>\n<li>500 :internal server error,服务器在执行请求时发生了错误</li>\n<li>503：service unavailable,服务器暂时处于超负载或正在进行停机维护，现在无法处理请求</li>\n</ul>\n</blockquote>\n<h2 id=\"扯句题外话\"><a href=\"#扯句题外话\" class=\"headerlink\" title=\"扯句题外话\"></a>扯句题外话</h2><h3 id=\"当在浏览器中输入一个url后回车，后台发生了什么？\"><a href=\"#当在浏览器中输入一个url后回车，后台发生了什么？\" class=\"headerlink\" title=\"当在浏览器中输入一个url后回车，后台发生了什么？\"></a>当在浏览器中输入一个url后回车，后台发生了什么？</h3><p>第一种简单的说呢就是这样的：<br>第一步：客户机提出域名解析请求,并将该请求发送给本地的域名服务器。<br>第二步：当本地的域名服务器收到请求后,就先查询本地的缓存,如果有该纪录项,则本地的域名服务器就直接把查询的结果返回。<br>第三步：如果本地的缓存中没有该纪录,则本地域名服务器就直接把请求发给根域名服务器,然后根域名服务器再返回给本地域名服务器一个所查询域(根的子域)的主域名服务器的地址。<br>第四步：本地服务器再向上一步返回的域名服务器发送请求,然后接受请求的服务器查询自己的缓存,如果没有该纪录,则返回相关的下级的域名服务器的地址。<br>第五步：重复第四步,直到找到正确的纪录。</p>\n<h3 id=\"面试官会问的详细重点\"><a href=\"#面试官会问的详细重点\" class=\"headerlink\" title=\"面试官会问的详细重点\"></a>面试官会问的详细重点</h3><p>这个在网上其实已经有很多的详细说明了，我就记录一个别人的博客地址<a href=\"http://blog.csdn.net/saiwaifeike/article/details/8789624\" target=\"_blank\" rel=\"external\">从输入网址到显示网页的全过程分析</a></p>\n","excerpt":"","more":"<h2 id=\"随便说两句\"><a href=\"#随便说两句\" class=\"headerlink\" title=\"随便说两句\"></a>随便说两句</h2><p>这个问题呢，其实遇到的并不多，常见的是一些笔试题，但是对于调试还是很重要的，所以也分出一章来记录一下，免得忘记，专门系统的整理和说明一下。</p>\n<h2 id=\"概要说明\"><a href=\"#概要说明\" class=\"headerlink\" title=\"概要说明\"></a>概要说明</h2><table>\n<thead>\n<tr>\n<th>状态码</th>\n<th>类型</th>\n<th>原因短语</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1xx</td>\n<td>informational(信息性状态码)</td>\n<td>接受的请求正在处理  </td>\n</tr>\n<tr>\n<td>2xx</td>\n<td>success(成功状态码)</td>\n<td>请求正常处理完毕</td>\n</tr>\n<tr>\n<td>3xx</td>\n<td>redirection(重定向状态码)</td>\n<td>需要进行附加操作以完成请求 </td>\n</tr>\n<tr>\n<td>4xx</td>\n<td>client error(客户端错误状态码)</td>\n<td>服务器无法处理请求</td>\n</tr>\n<tr>\n<td>5xx</td>\n<td>server error(服务器错误状态码)</td>\n<td>服务器处理请求失败</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"具体说明：2xx\"><a href=\"#具体说明：2xx\" class=\"headerlink\" title=\"具体说明：2xx\"></a>具体说明：2xx</h3><blockquote>\n<ul>\n<li>200 :ok，请求正常处理</li>\n<li>204：no content,请求处理成功，但没与资源可返回</li>\n<li>206： partical content,对某一范围进行请求</li>\n</ul>\n</blockquote>\n<h3 id=\"具体说明：3xx\"><a href=\"#具体说明：3xx\" class=\"headerlink\" title=\"具体说明：3xx\"></a>具体说明：3xx</h3><blockquote>\n<ul>\n<li>301 :moved permanently,永久性重定向，请求的资源已经被分配了新的URI，以后应使用资源现在所指向的URI。</li>\n<li>302：found,临时性重定向，请求的资源已经被分配了新的URI，希望用户本次能使用新的URI访问。</li>\n<li>303：see other,请求的资源存在另外一个URI，应使用GET方法定向获取请求的资源</li>\n<li>304：not modified,与重定向无关，是指客户端发送附带条件的请求时，服务器端允许请求访问资源，但发送的请求未满足条件</li>\n<li>307：temporary redirect,临时重定向，与302相似，但是302遵守浏览器规范，不会从POST变成GET</li>\n</ul>\n</blockquote>\n<h3 id=\"具体说明：4xx\"><a href=\"#具体说明：4xx\" class=\"headerlink\" title=\"具体说明：4xx\"></a>具体说明：4xx</h3><blockquote>\n<ul>\n<li>400 :bad request,请求报文存在语法错误</li>\n<li>401：unauthorized,发送的请求需要有通过HTTP认证的认证信息</li>\n<li>403：forbidden,对请求资源的访问被服务器拒绝了，例如权限问题，系统授权等</li>\n<li>404：not found,服务器上无法找到请求的资源</li>\n</ul>\n</blockquote>\n<h3 id=\"具体说明：5xx\"><a href=\"#具体说明：5xx\" class=\"headerlink\" title=\"具体说明：5xx\"></a>具体说明：5xx</h3><blockquote>\n<ul>\n<li>500 :internal server error,服务器在执行请求时发生了错误</li>\n<li>503：service unavailable,服务器暂时处于超负载或正在进行停机维护，现在无法处理请求</li>\n</ul>\n</blockquote>\n<h2 id=\"扯句题外话\"><a href=\"#扯句题外话\" class=\"headerlink\" title=\"扯句题外话\"></a>扯句题外话</h2><h3 id=\"当在浏览器中输入一个url后回车，后台发生了什么？\"><a href=\"#当在浏览器中输入一个url后回车，后台发生了什么？\" class=\"headerlink\" title=\"当在浏览器中输入一个url后回车，后台发生了什么？\"></a>当在浏览器中输入一个url后回车，后台发生了什么？</h3><p>第一种简单的说呢就是这样的：<br>第一步：客户机提出域名解析请求,并将该请求发送给本地的域名服务器。<br>第二步：当本地的域名服务器收到请求后,就先查询本地的缓存,如果有该纪录项,则本地的域名服务器就直接把查询的结果返回。<br>第三步：如果本地的缓存中没有该纪录,则本地域名服务器就直接把请求发给根域名服务器,然后根域名服务器再返回给本地域名服务器一个所查询域(根的子域)的主域名服务器的地址。<br>第四步：本地服务器再向上一步返回的域名服务器发送请求,然后接受请求的服务器查询自己的缓存,如果没有该纪录,则返回相关的下级的域名服务器的地址。<br>第五步：重复第四步,直到找到正确的纪录。</p>\n<h3 id=\"面试官会问的详细重点\"><a href=\"#面试官会问的详细重点\" class=\"headerlink\" title=\"面试官会问的详细重点\"></a>面试官会问的详细重点</h3><p>这个在网上其实已经有很多的详细说明了，我就记录一个别人的博客地址<a href=\"http://blog.csdn.net/saiwaifeike/article/details/8789624\">从输入网址到显示网页的全过程分析</a></p>\n"},{"title":"如何用hexo搭建个人博客","date":"2016-03-06T13:32:17.000Z","_content":"## 准备工作\n > * 安装git:不会安装，请查看：[window系统下如何安装git](http://saltleaves.github.io/2016/03/01/hello-world/) \n > * 安装node.js:官网下载安装\n > * 托管代码的网站：github或者gitcafe(天朝本土化的github)\n\n## hexo基础命令讲解\n首先，下面的的代码将不再重复叙述，先把各个hexo 的基本命令介绍一下：\n\n```java\n$ hexo g  //完整命令为hexo generate,用于生成静态文件\n$ hexo s  //完整命令为hexo server,用于启动服务器，主要用来本地预览（localhost:4000）\n$ hexo d  //完整命令为hexo deploy,用于将本地文件发布到github上\n$ hexo n  //完整命令为hexo new,用于新建一篇文章\n```\n## 开始搭建\n以下为正常情况下的安装流程，假如出现跟说好的不一样的情况，最后会有一部分的问题解答。\n### 安装hexo \n在任意的地方鼠标右键，打开git bash输入\n```\n$ npm install hexo-deployer-git --save\n$ hexo g\n$ hexo d\n```\n### 下载网站所需文件\n创建放置博客文件的文件夹：hexo文件夹。在自己想要的位置创建文件夹，例如**E:\\hexo**，当然最好不要放在中文路径下。之后进入文件夹，即**E:\\hexo**内，点击鼠标右键，选择Git Bash，执行以下命令，Hexo会自动在该文件夹下下载搭建网站所需的所有文件。 \n```\n$ hexo init\n```\n### 下载依赖包\n```\n$ npm install\n```\n### 查看结果\n可以先看看刚刚下载的hexo文件带来了什么，在E:\\hexo内执行以下命令\n```\n$ hexo g\n$ hexo s\n```\n## 继续升级（选择主题）\n可以从知乎或者其他的地方选择自己喜欢的主题，并且下载下来，放置在themes文件夹下，下面是以默认主题为例的修改配置文件：\n * 博客的配置文件:在自己定义的目录（E:\\hexo）的_config.yml\n * 主题的配置文件:E:\\hexo\\themes\\landscape\\_config.yml\n\n## 部署到github\n### 注册github账号\n已有的可以跳过，没有的，请[在此](https://github.com/)注册，这里就不介绍了\n### 创建Repository\n 需要注意的是Repository的名字，需要和你的github的账户名相同，由于我的已经创建过了，所以红色警告无须在意。\n![创建过程示例](http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160308215634.png)\n\n### 配置连接到github\n打开你刚刚创建的Repository，选择SSH，然后复制。\n![创建过程示例](http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160308220147.png)\n之后打开博客的配置文件_config.yml,一般是在最后，修改为以下代码，需要注意的是：后面要加空格\n```\ndeploy:\n  type: git\n  repo: git@github.com:saltleaves/saltleaves.github.io.git\n  branch: master\n```\n### 推送到github\n```\n$ hexo g\n$ hexo d\n```     \n运行之后，我们就可以打开自己的网页查看了，网页名字即xxx.github.io(xxx为帐户名)      \n## 跟说好的不一样呢\n问题：右键菜单中没有 git bash 选项\n> * 进入开始菜单找到 git bash ，然后通过 cd 进入相应目录执行命令。\n\n问题：在github部署完成之后，马上访问可能出现404错误\n> * 等待10分钟左右，查看邮箱是否有验证邮件\n\n问题：配置连接git后，出现error deployer not found:github 的错误\n> * 这个问题常常出现在hexo阶段命令行与本文不一样的人，可以尝试使用本文中的方法\n\n","source":"_posts/如何用hexo搭建个人博客.md","raw":"---\ntitle: 如何用hexo搭建个人博客\ndate: 2016-03-06 21:32:17\ntags: [hexo,博客]\n---\n## 准备工作\n > * 安装git:不会安装，请查看：[window系统下如何安装git](http://saltleaves.github.io/2016/03/01/hello-world/) \n > * 安装node.js:官网下载安装\n > * 托管代码的网站：github或者gitcafe(天朝本土化的github)\n\n## hexo基础命令讲解\n首先，下面的的代码将不再重复叙述，先把各个hexo 的基本命令介绍一下：\n\n```java\n$ hexo g  //完整命令为hexo generate,用于生成静态文件\n$ hexo s  //完整命令为hexo server,用于启动服务器，主要用来本地预览（localhost:4000）\n$ hexo d  //完整命令为hexo deploy,用于将本地文件发布到github上\n$ hexo n  //完整命令为hexo new,用于新建一篇文章\n```\n## 开始搭建\n以下为正常情况下的安装流程，假如出现跟说好的不一样的情况，最后会有一部分的问题解答。\n### 安装hexo \n在任意的地方鼠标右键，打开git bash输入\n```\n$ npm install hexo-deployer-git --save\n$ hexo g\n$ hexo d\n```\n### 下载网站所需文件\n创建放置博客文件的文件夹：hexo文件夹。在自己想要的位置创建文件夹，例如**E:\\hexo**，当然最好不要放在中文路径下。之后进入文件夹，即**E:\\hexo**内，点击鼠标右键，选择Git Bash，执行以下命令，Hexo会自动在该文件夹下下载搭建网站所需的所有文件。 \n```\n$ hexo init\n```\n### 下载依赖包\n```\n$ npm install\n```\n### 查看结果\n可以先看看刚刚下载的hexo文件带来了什么，在E:\\hexo内执行以下命令\n```\n$ hexo g\n$ hexo s\n```\n## 继续升级（选择主题）\n可以从知乎或者其他的地方选择自己喜欢的主题，并且下载下来，放置在themes文件夹下，下面是以默认主题为例的修改配置文件：\n * 博客的配置文件:在自己定义的目录（E:\\hexo）的_config.yml\n * 主题的配置文件:E:\\hexo\\themes\\landscape\\_config.yml\n\n## 部署到github\n### 注册github账号\n已有的可以跳过，没有的，请[在此](https://github.com/)注册，这里就不介绍了\n### 创建Repository\n 需要注意的是Repository的名字，需要和你的github的账户名相同，由于我的已经创建过了，所以红色警告无须在意。\n![创建过程示例](http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160308215634.png)\n\n### 配置连接到github\n打开你刚刚创建的Repository，选择SSH，然后复制。\n![创建过程示例](http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160308220147.png)\n之后打开博客的配置文件_config.yml,一般是在最后，修改为以下代码，需要注意的是：后面要加空格\n```\ndeploy:\n  type: git\n  repo: git@github.com:saltleaves/saltleaves.github.io.git\n  branch: master\n```\n### 推送到github\n```\n$ hexo g\n$ hexo d\n```     \n运行之后，我们就可以打开自己的网页查看了，网页名字即xxx.github.io(xxx为帐户名)      \n## 跟说好的不一样呢\n问题：右键菜单中没有 git bash 选项\n> * 进入开始菜单找到 git bash ，然后通过 cd 进入相应目录执行命令。\n\n问题：在github部署完成之后，马上访问可能出现404错误\n> * 等待10分钟左右，查看邮箱是否有验证邮件\n\n问题：配置连接git后，出现error deployer not found:github 的错误\n> * 这个问题常常出现在hexo阶段命令行与本文不一样的人，可以尝试使用本文中的方法\n\n","slug":"如何用hexo搭建个人博客","published":1,"updated":"2017-03-13T07:46:46.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqjy000lzss3ndy7mh4d","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><blockquote>\n<ul>\n<li>安装git:不会安装，请查看：<a href=\"http://saltleaves.github.io/2016/03/01/hello-world/\" target=\"_blank\" rel=\"external\">window系统下如何安装git</a> </li>\n<li>安装node.js:官网下载安装</li>\n<li>托管代码的网站：github或者gitcafe(天朝本土化的github)</li>\n</ul>\n</blockquote>\n<h2 id=\"hexo基础命令讲解\"><a href=\"#hexo基础命令讲解\" class=\"headerlink\" title=\"hexo基础命令讲解\"></a>hexo基础命令讲解</h2><p>首先，下面的的代码将不再重复叙述，先把各个hexo 的基本命令介绍一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g  <span class=\"comment\">//完整命令为hexo generate,用于生成静态文件</span></div><div class=\"line\">$ hexo s  <span class=\"comment\">//完整命令为hexo server,用于启动服务器，主要用来本地预览（localhost:4000）</span></div><div class=\"line\">$ hexo d  <span class=\"comment\">//完整命令为hexo deploy,用于将本地文件发布到github上</span></div><div class=\"line\">$ hexo n  <span class=\"comment\">//完整命令为hexo new,用于新建一篇文章</span></div></pre></td></tr></table></figure>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><p>以下为正常情况下的安装流程，假如出现跟说好的不一样的情况，最后会有一部分的问题解答。</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>在任意的地方鼠标右键，打开git bash输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure></p>\n<h3 id=\"下载网站所需文件\"><a href=\"#下载网站所需文件\" class=\"headerlink\" title=\"下载网站所需文件\"></a>下载网站所需文件</h3><p>创建放置博客文件的文件夹：hexo文件夹。在自己想要的位置创建文件夹，例如<strong>E:\\hexo</strong>，当然最好不要放在中文路径下。之后进入文件夹，即<strong>E:\\hexo</strong>内，点击鼠标右键，选择Git Bash，执行以下命令，Hexo会自动在该文件夹下下载搭建网站所需的所有文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<h3 id=\"下载依赖包\"><a href=\"#下载依赖包\" class=\"headerlink\" title=\"下载依赖包\"></a>下载依赖包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<h3 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h3><p>可以先看看刚刚下载的hexo文件带来了什么，在E:\\hexo内执行以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure></p>\n<h2 id=\"继续升级（选择主题）\"><a href=\"#继续升级（选择主题）\" class=\"headerlink\" title=\"继续升级（选择主题）\"></a>继续升级（选择主题）</h2><p>可以从知乎或者其他的地方选择自己喜欢的主题，并且下载下来，放置在themes文件夹下，下面是以默认主题为例的修改配置文件：</p>\n<ul>\n<li>博客的配置文件:在自己定义的目录（E:\\hexo）的_config.yml</li>\n<li>主题的配置文件:E:\\hexo\\themes\\landscape_config.yml</li>\n</ul>\n<h2 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h2><h3 id=\"注册github账号\"><a href=\"#注册github账号\" class=\"headerlink\" title=\"注册github账号\"></a>注册github账号</h3><p>已有的可以跳过，没有的，请<a href=\"https://github.com/\" target=\"_blank\" rel=\"external\">在此</a>注册，这里就不介绍了</p>\n<h3 id=\"创建Repository\"><a href=\"#创建Repository\" class=\"headerlink\" title=\"创建Repository\"></a>创建Repository</h3><p> 需要注意的是Repository的名字，需要和你的github的账户名相同，由于我的已经创建过了，所以红色警告无须在意。<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160308215634.png\" alt=\"创建过程示例\"></p>\n<h3 id=\"配置连接到github\"><a href=\"#配置连接到github\" class=\"headerlink\" title=\"配置连接到github\"></a>配置连接到github</h3><p>打开你刚刚创建的Repository，选择SSH，然后复制。<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160308220147.png\" alt=\"创建过程示例\"><br>之后打开博客的配置文件_config.yml,一般是在最后，修改为以下代码，需要注意的是：后面要加空格<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@github.com:saltleaves/saltleaves.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<h3 id=\"推送到github\"><a href=\"#推送到github\" class=\"headerlink\" title=\"推送到github\"></a>推送到github</h3><pre><code>$ hexo g\n$ hexo d\n</code></pre><p>运行之后，我们就可以打开自己的网页查看了，网页名字即xxx.github.io(xxx为帐户名)      </p>\n<h2 id=\"跟说好的不一样呢\"><a href=\"#跟说好的不一样呢\" class=\"headerlink\" title=\"跟说好的不一样呢\"></a>跟说好的不一样呢</h2><p>问题：右键菜单中没有 git bash 选项</p>\n<blockquote>\n<ul>\n<li>进入开始菜单找到 git bash ，然后通过 cd 进入相应目录执行命令。</li>\n</ul>\n</blockquote>\n<p>问题：在github部署完成之后，马上访问可能出现404错误</p>\n<blockquote>\n<ul>\n<li>等待10分钟左右，查看邮箱是否有验证邮件</li>\n</ul>\n</blockquote>\n<p>问题：配置连接git后，出现error deployer not found:github 的错误</p>\n<blockquote>\n<ul>\n<li>这个问题常常出现在hexo阶段命令行与本文不一样的人，可以尝试使用本文中的方法</li>\n</ul>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><blockquote>\n<ul>\n<li>安装git:不会安装，请查看：<a href=\"http://saltleaves.github.io/2016/03/01/hello-world/\">window系统下如何安装git</a> </li>\n<li>安装node.js:官网下载安装</li>\n<li>托管代码的网站：github或者gitcafe(天朝本土化的github)</li>\n</ul>\n</blockquote>\n<h2 id=\"hexo基础命令讲解\"><a href=\"#hexo基础命令讲解\" class=\"headerlink\" title=\"hexo基础命令讲解\"></a>hexo基础命令讲解</h2><p>首先，下面的的代码将不再重复叙述，先把各个hexo 的基本命令介绍一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g  <span class=\"comment\">//完整命令为hexo generate,用于生成静态文件</span></div><div class=\"line\">$ hexo s  <span class=\"comment\">//完整命令为hexo server,用于启动服务器，主要用来本地预览（localhost:4000）</span></div><div class=\"line\">$ hexo d  <span class=\"comment\">//完整命令为hexo deploy,用于将本地文件发布到github上</span></div><div class=\"line\">$ hexo n  <span class=\"comment\">//完整命令为hexo new,用于新建一篇文章</span></div></pre></td></tr></table></figure>\n<h2 id=\"开始搭建\"><a href=\"#开始搭建\" class=\"headerlink\" title=\"开始搭建\"></a>开始搭建</h2><p>以下为正常情况下的安装流程，假如出现跟说好的不一样的情况，最后会有一部分的问题解答。</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>在任意的地方鼠标右键，打开git bash输入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install hexo-deployer-git --save</div><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo d</div></pre></td></tr></table></figure></p>\n<h3 id=\"下载网站所需文件\"><a href=\"#下载网站所需文件\" class=\"headerlink\" title=\"下载网站所需文件\"></a>下载网站所需文件</h3><p>创建放置博客文件的文件夹：hexo文件夹。在自己想要的位置创建文件夹，例如<strong>E:\\hexo</strong>，当然最好不要放在中文路径下。之后进入文件夹，即<strong>E:\\hexo</strong>内，点击鼠标右键，选择Git Bash，执行以下命令，Hexo会自动在该文件夹下下载搭建网站所需的所有文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo init</div></pre></td></tr></table></figure></p>\n<h3 id=\"下载依赖包\"><a href=\"#下载依赖包\" class=\"headerlink\" title=\"下载依赖包\"></a>下载依赖包</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm install</div></pre></td></tr></table></figure>\n<h3 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h3><p>可以先看看刚刚下载的hexo文件带来了什么，在E:\\hexo内执行以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo g</div><div class=\"line\">$ hexo s</div></pre></td></tr></table></figure></p>\n<h2 id=\"继续升级（选择主题）\"><a href=\"#继续升级（选择主题）\" class=\"headerlink\" title=\"继续升级（选择主题）\"></a>继续升级（选择主题）</h2><p>可以从知乎或者其他的地方选择自己喜欢的主题，并且下载下来，放置在themes文件夹下，下面是以默认主题为例的修改配置文件：</p>\n<ul>\n<li>博客的配置文件:在自己定义的目录（E:\\hexo）的_config.yml</li>\n<li>主题的配置文件:E:\\hexo\\themes\\landscape_config.yml</li>\n</ul>\n<h2 id=\"部署到github\"><a href=\"#部署到github\" class=\"headerlink\" title=\"部署到github\"></a>部署到github</h2><h3 id=\"注册github账号\"><a href=\"#注册github账号\" class=\"headerlink\" title=\"注册github账号\"></a>注册github账号</h3><p>已有的可以跳过，没有的，请<a href=\"https://github.com/\">在此</a>注册，这里就不介绍了</p>\n<h3 id=\"创建Repository\"><a href=\"#创建Repository\" class=\"headerlink\" title=\"创建Repository\"></a>创建Repository</h3><p> 需要注意的是Repository的名字，需要和你的github的账户名相同，由于我的已经创建过了，所以红色警告无须在意。<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160308215634.png\" alt=\"创建过程示例\"></p>\n<h3 id=\"配置连接到github\"><a href=\"#配置连接到github\" class=\"headerlink\" title=\"配置连接到github\"></a>配置连接到github</h3><p>打开你刚刚创建的Repository，选择SSH，然后复制。<br><img src=\"http://7xrkml.com1.z0.glb.clouddn.com/QQ%E6%88%AA%E5%9B%BE20160308220147.png\" alt=\"创建过程示例\"><br>之后打开博客的配置文件_config.yml,一般是在最后，修改为以下代码，需要注意的是：后面要加空格<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repo: git@github.com:saltleaves/saltleaves.github.io.git</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n<h3 id=\"推送到github\"><a href=\"#推送到github\" class=\"headerlink\" title=\"推送到github\"></a>推送到github</h3><pre><code>$ hexo g\n$ hexo d\n</code></pre><p>运行之后，我们就可以打开自己的网页查看了，网页名字即xxx.github.io(xxx为帐户名)      </p>\n<h2 id=\"跟说好的不一样呢\"><a href=\"#跟说好的不一样呢\" class=\"headerlink\" title=\"跟说好的不一样呢\"></a>跟说好的不一样呢</h2><p>问题：右键菜单中没有 git bash 选项</p>\n<blockquote>\n<ul>\n<li>进入开始菜单找到 git bash ，然后通过 cd 进入相应目录执行命令。</li>\n</ul>\n</blockquote>\n<p>问题：在github部署完成之后，马上访问可能出现404错误</p>\n<blockquote>\n<ul>\n<li>等待10分钟左右，查看邮箱是否有验证邮件</li>\n</ul>\n</blockquote>\n<p>问题：配置连接git后，出现error deployer not found:github 的错误</p>\n<blockquote>\n<ul>\n<li>这个问题常常出现在hexo阶段命令行与本文不一样的人，可以尝试使用本文中的方法</li>\n</ul>\n</blockquote>\n"},{"title":"利用css模拟滚动条","date":"2016-03-10T12:08:02.000Z","_content":"## 模拟滚动条\n 主要是好友看到我的博客的主题的模拟滚动条觉得不错，然后摘抄下来的，在这里做一下记录，就权当是笔记了。webkit支持拥有overflow属性的区域，列表框，下拉菜单，textarea的滚动条自定义样式，，不支持IE。\n## webkit-scrollbar简介\n### 啥是滚动条\n滚动条是一个伪元素，可以自定义样式。这个伪类可以将webkit自身的滚动条渲染关闭，只按照用户自定义的css信息进行渲染。\n\n```css\n::-webkit-scrollbar {\n   width: 13px;\n   height: 13px;\n}\n```\n例如上诉的代码所示，width和height属性分别表示纵向滚动条的宽度和横向滚动条的高。也可以指定为%百分比，在在这种情况下就代表了，滚动条占整个视窗的百分比\n### 滚动条有啥\n滚动条包括：滚动按钮和一个轨道。轨道本身又可以近一步被分为轨道碎片（track pieces）和一个滑块。轨道碎片指的是滑块上方和下面的区域。具体的细节如下：\n>* ::-webkit-scrollbar 滚动条整体部分\n* ::-webkit-scrollbar-thumb  滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）\n* ::-webkit-scrollbar-track  滚动条的轨道（里面装有Thumb）\n* ::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微 调小方块的位置。\n* ::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）\n* ::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处\n* ::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件\n\n### 伪类的设置\n任何对象都可以设置：边框、阴影、背景图片等等，创建的滚动条任然会按照操作系统本身的设置来完成其交互的行为。\n>* :horizontal(horizontal伪类适用于任何水平方向上的滚动条)\n>* :vertical(vertical伪类适用于任何垂直方向的滚动条)\n>* :decrement(decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮)\n>* :increment(increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮)\n>* :start(start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面)\n>* :end(end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面)\n>* :double-button(double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。)\n>* :single-button(single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。)\n>* :no-button(no-button伪类表示轨道结束的位置没有按钮。)\n>* :corner-present(corner-present伪类表示滚动条的角落是否存在。)\n>* :window-inactive(适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。)\n\n### 常用的特殊状态的设置\n```css\n::-webkit-scrollbar-track-piece:start {\n   /*滚动条上半边或左半边*/\n}\n\n::-webkit-scrollbar-thumb:window-inactive {\n   /*当焦点不在当前区域滑块的状态*/\n\n}\n\n::-webkit-scrollbar-button:horizontal:decrement:hover {\n   /*当鼠标在水平滚动条下面的按钮上的状态*/\n\n}\n```\n## 本网站的滚动条代码示例\n```css\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  -webkit-border-radius: 8px;\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  -webkit-border-radius: 8px;\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat 0 0;\n}\n::-webkit-scrollbar-button:start:hover {\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat -15px 0;\n}\n::-webkit-scrollbar-button:start:active {\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat -30px 0;\n}\n::-webkit-scrollbar-button:end {\n  width: 10px;\n  height: 10px;\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat 0 -18px;\n}\n::-webkit-scrollbar-button:end:hover {\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat -15px -18px;\n}\n::-webkit-scrollbar-button:end:active {\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat -30px -18px;\n}\n```","source":"_posts/利用css模拟滚动条.md","raw":"---\ntitle: 利用css模拟滚动条\ndate: 2016-03-10 20:08:02\ntags: [css,模拟滚动条,摘抄]\n---\n## 模拟滚动条\n 主要是好友看到我的博客的主题的模拟滚动条觉得不错，然后摘抄下来的，在这里做一下记录，就权当是笔记了。webkit支持拥有overflow属性的区域，列表框，下拉菜单，textarea的滚动条自定义样式，，不支持IE。\n## webkit-scrollbar简介\n### 啥是滚动条\n滚动条是一个伪元素，可以自定义样式。这个伪类可以将webkit自身的滚动条渲染关闭，只按照用户自定义的css信息进行渲染。\n\n```css\n::-webkit-scrollbar {\n   width: 13px;\n   height: 13px;\n}\n```\n例如上诉的代码所示，width和height属性分别表示纵向滚动条的宽度和横向滚动条的高。也可以指定为%百分比，在在这种情况下就代表了，滚动条占整个视窗的百分比\n### 滚动条有啥\n滚动条包括：滚动按钮和一个轨道。轨道本身又可以近一步被分为轨道碎片（track pieces）和一个滑块。轨道碎片指的是滑块上方和下面的区域。具体的细节如下：\n>* ::-webkit-scrollbar 滚动条整体部分\n* ::-webkit-scrollbar-thumb  滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）\n* ::-webkit-scrollbar-track  滚动条的轨道（里面装有Thumb）\n* ::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微 调小方块的位置。\n* ::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）\n* ::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处\n* ::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件\n\n### 伪类的设置\n任何对象都可以设置：边框、阴影、背景图片等等，创建的滚动条任然会按照操作系统本身的设置来完成其交互的行为。\n>* :horizontal(horizontal伪类适用于任何水平方向上的滚动条)\n>* :vertical(vertical伪类适用于任何垂直方向的滚动条)\n>* :decrement(decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮)\n>* :increment(increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮)\n>* :start(start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面)\n>* :end(end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面)\n>* :double-button(double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。)\n>* :single-button(single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。)\n>* :no-button(no-button伪类表示轨道结束的位置没有按钮。)\n>* :corner-present(corner-present伪类表示滚动条的角落是否存在。)\n>* :window-inactive(适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。)\n\n### 常用的特殊状态的设置\n```css\n::-webkit-scrollbar-track-piece:start {\n   /*滚动条上半边或左半边*/\n}\n\n::-webkit-scrollbar-thumb:window-inactive {\n   /*当焦点不在当前区域滑块的状态*/\n\n}\n\n::-webkit-scrollbar-button:horizontal:decrement:hover {\n   /*当鼠标在水平滚动条下面的按钮上的状态*/\n\n}\n```\n## 本网站的滚动条代码示例\n```css\n::-webkit-scrollbar {\n  width: 10px;\n  height: 10px;\n}\n::-webkit-scrollbar-button {\n  width: 0;\n  height: 0;\n}\n::-webkit-scrollbar-button:start:increment,\n::-webkit-scrollbar-button:end:decrement {\n  display: none;\n}\n::-webkit-scrollbar-corner {\n  display: block;\n}\n::-webkit-scrollbar-thumb {\n  -webkit-border-radius: 8px;\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.2);\n}\n::-webkit-scrollbar-thumb:hover {\n  -webkit-border-radius: 8px;\n  border-radius: 8px;\n  background-color: rgba(0,0,0,0.5);\n}\n::-webkit-scrollbar-track,\n::-webkit-scrollbar-thumb {\n  border-right: 1px solid transparent;\n  border-left: 1px solid transparent;\n}\n::-webkit-scrollbar-track:hover {\n  background-color: rgba(0,0,0,0.15);\n}\n::-webkit-scrollbar-button:start {\n  width: 10px;\n  height: 10px;\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat 0 0;\n}\n::-webkit-scrollbar-button:start:hover {\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat -15px 0;\n}\n::-webkit-scrollbar-button:start:active {\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat -30px 0;\n}\n::-webkit-scrollbar-button:end {\n  width: 10px;\n  height: 10px;\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat 0 -18px;\n}\n::-webkit-scrollbar-button:end:hover {\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat -15px -18px;\n}\n::-webkit-scrollbar-button:end:active {\n  background: url(\"../img/scrollbar_arrow.png\") no-repeat -30px -18px;\n}\n```","slug":"利用css模拟滚动条","published":1,"updated":"2017-03-13T07:46:46.892Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj07ukqk0000nzss3is84fszw","content":"<h2 id=\"模拟滚动条\"><a href=\"#模拟滚动条\" class=\"headerlink\" title=\"模拟滚动条\"></a>模拟滚动条</h2><p> 主要是好友看到我的博客的主题的模拟滚动条觉得不错，然后摘抄下来的，在这里做一下记录，就权当是笔记了。webkit支持拥有overflow属性的区域，列表框，下拉菜单，textarea的滚动条自定义样式，，不支持IE。</p>\n<h2 id=\"webkit-scrollbar简介\"><a href=\"#webkit-scrollbar简介\" class=\"headerlink\" title=\"webkit-scrollbar简介\"></a>webkit-scrollbar简介</h2><h3 id=\"啥是滚动条\"><a href=\"#啥是滚动条\" class=\"headerlink\" title=\"啥是滚动条\"></a>啥是滚动条</h3><p>滚动条是一个伪元素，可以自定义样式。这个伪类可以将webkit自身的滚动条渲染关闭，只按照用户自定义的css信息进行渲染。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">   <span class=\"attribute\">height</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>例如上诉的代码所示，width和height属性分别表示纵向滚动条的宽度和横向滚动条的高。也可以指定为%百分比，在在这种情况下就代表了，滚动条占整个视窗的百分比</p>\n<h3 id=\"滚动条有啥\"><a href=\"#滚动条有啥\" class=\"headerlink\" title=\"滚动条有啥\"></a>滚动条有啥</h3><p>滚动条包括：滚动按钮和一个轨道。轨道本身又可以近一步被分为轨道碎片（track pieces）和一个滑块。轨道碎片指的是滑块上方和下面的区域。具体的细节如下：</p>\n<blockquote>\n<ul>\n<li>::-webkit-scrollbar 滚动条整体部分</li>\n<li>::-webkit-scrollbar-thumb  滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）</li>\n<li>::-webkit-scrollbar-track  滚动条的轨道（里面装有Thumb）</li>\n<li>::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微 调小方块的位置。</li>\n<li>::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）</li>\n<li>::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处</li>\n<li>::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</li>\n</ul>\n</blockquote>\n<h3 id=\"伪类的设置\"><a href=\"#伪类的设置\" class=\"headerlink\" title=\"伪类的设置\"></a>伪类的设置</h3><p>任何对象都可以设置：边框、阴影、背景图片等等，创建的滚动条任然会按照操作系统本身的设置来完成其交互的行为。</p>\n<blockquote>\n<ul>\n<li>:horizontal(horizontal伪类适用于任何水平方向上的滚动条)</li>\n<li>:vertical(vertical伪类适用于任何垂直方向的滚动条)</li>\n<li>:decrement(decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮)</li>\n<li>:increment(increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮)</li>\n<li>:start(start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面)</li>\n<li>:end(end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面)</li>\n<li>:double-button(double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。)</li>\n<li>:single-button(single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。)</li>\n<li>:no-button(no-button伪类表示轨道结束的位置没有按钮。)</li>\n<li>:corner-present(corner-present伪类表示滚动条的角落是否存在。)</li>\n<li>:window-inactive(适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。)</li>\n</ul>\n</blockquote>\n<h3 id=\"常用的特殊状态的设置\"><a href=\"#常用的特殊状态的设置\" class=\"headerlink\" title=\"常用的特殊状态的设置\"></a>常用的特殊状态的设置</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-track-piece</span><span class=\"selector-pseudo\">:start</span> &#123;</div><div class=\"line\">   <span class=\"comment\">/*滚动条上半边或左半边*/</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span><span class=\"selector-pseudo\">:window-inactive</span> &#123;</div><div class=\"line\">   <span class=\"comment\">/*当焦点不在当前区域滑块的状态*/</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:horizontal</span><span class=\"selector-pseudo\">:decrement</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">   <span class=\"comment\">/*当鼠标在水平滚动条下面的按钮上的状态*/</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"本网站的滚动条代码示例\"><a href=\"#本网站的滚动条代码示例\" class=\"headerlink\" title=\"本网站的滚动条代码示例\"></a>本网站的滚动条代码示例</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:start</span><span class=\"selector-pseudo\">:increment</span>,</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:end</span><span class=\"selector-pseudo\">:decrement</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-corner</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: block;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0.2);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0.5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-track</span>,</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-track</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0.15);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:start</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat <span class=\"number\">0</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:start</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat -<span class=\"number\">15px</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:start</span><span class=\"selector-pseudo\">:active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat -<span class=\"number\">30px</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:end</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat <span class=\"number\">0</span> -<span class=\"number\">18px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:end</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat -<span class=\"number\">15px</span> -<span class=\"number\">18px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:end</span><span class=\"selector-pseudo\">:active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat -<span class=\"number\">30px</span> -<span class=\"number\">18px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"模拟滚动条\"><a href=\"#模拟滚动条\" class=\"headerlink\" title=\"模拟滚动条\"></a>模拟滚动条</h2><p> 主要是好友看到我的博客的主题的模拟滚动条觉得不错，然后摘抄下来的，在这里做一下记录，就权当是笔记了。webkit支持拥有overflow属性的区域，列表框，下拉菜单，textarea的滚动条自定义样式，，不支持IE。</p>\n<h2 id=\"webkit-scrollbar简介\"><a href=\"#webkit-scrollbar简介\" class=\"headerlink\" title=\"webkit-scrollbar简介\"></a>webkit-scrollbar简介</h2><h3 id=\"啥是滚动条\"><a href=\"#啥是滚动条\" class=\"headerlink\" title=\"啥是滚动条\"></a>啥是滚动条</h3><p>滚动条是一个伪元素，可以自定义样式。这个伪类可以将webkit自身的滚动条渲染关闭，只按照用户自定义的css信息进行渲染。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span> &#123;</div><div class=\"line\">   <span class=\"attribute\">width</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">   <span class=\"attribute\">height</span>: <span class=\"number\">13px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>例如上诉的代码所示，width和height属性分别表示纵向滚动条的宽度和横向滚动条的高。也可以指定为%百分比，在在这种情况下就代表了，滚动条占整个视窗的百分比</p>\n<h3 id=\"滚动条有啥\"><a href=\"#滚动条有啥\" class=\"headerlink\" title=\"滚动条有啥\"></a>滚动条有啥</h3><p>滚动条包括：滚动按钮和一个轨道。轨道本身又可以近一步被分为轨道碎片（track pieces）和一个滑块。轨道碎片指的是滑块上方和下面的区域。具体的细节如下：</p>\n<blockquote>\n<ul>\n<li>::-webkit-scrollbar 滚动条整体部分</li>\n<li>::-webkit-scrollbar-thumb  滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）</li>\n<li>::-webkit-scrollbar-track  滚动条的轨道（里面装有Thumb）</li>\n<li>::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微 调小方块的位置。</li>\n<li>::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）</li>\n<li>::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处</li>\n<li>::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</li>\n</ul>\n</blockquote>\n<h3 id=\"伪类的设置\"><a href=\"#伪类的设置\" class=\"headerlink\" title=\"伪类的设置\"></a>伪类的设置</h3><p>任何对象都可以设置：边框、阴影、背景图片等等，创建的滚动条任然会按照操作系统本身的设置来完成其交互的行为。</p>\n<blockquote>\n<ul>\n<li>:horizontal(horizontal伪类适用于任何水平方向上的滚动条)</li>\n<li>:vertical(vertical伪类适用于任何垂直方向的滚动条)</li>\n<li>:decrement(decrement伪类适用于按钮和轨道碎片。表示递减的按钮或轨道碎片，例如可以使区域向上或者向右移动的区域和按钮)</li>\n<li>:increment(increment伪类适用于按钮和轨道碎片。表示递增的按钮或轨道碎片，例如可以使区域向下或者向左移动的区域和按钮)</li>\n<li>:start(start伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的前面)</li>\n<li>:end(end伪类适用于按钮和轨道碎片。表示对象（按钮 轨道碎片）是否放在滑块的后面)</li>\n<li>:double-button(double-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。也就是轨道碎片紧挨着一对在一起的按钮。)</li>\n<li>:single-button(single-button伪类适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。也就是轨道碎片紧挨着一个单独的按钮。)</li>\n<li>:no-button(no-button伪类表示轨道结束的位置没有按钮。)</li>\n<li>:corner-present(corner-present伪类表示滚动条的角落是否存在。)</li>\n<li>:window-inactive(适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。)</li>\n</ul>\n</blockquote>\n<h3 id=\"常用的特殊状态的设置\"><a href=\"#常用的特殊状态的设置\" class=\"headerlink\" title=\"常用的特殊状态的设置\"></a>常用的特殊状态的设置</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-track-piece</span><span class=\"selector-pseudo\">:start</span> &#123;</div><div class=\"line\">   <span class=\"comment\">/*滚动条上半边或左半边*/</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span><span class=\"selector-pseudo\">:window-inactive</span> &#123;</div><div class=\"line\">   <span class=\"comment\">/*当焦点不在当前区域滑块的状态*/</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:horizontal</span><span class=\"selector-pseudo\">:decrement</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">   <span class=\"comment\">/*当鼠标在水平滚动条下面的按钮上的状态*/</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"本网站的滚动条代码示例\"><a href=\"#本网站的滚动条代码示例\" class=\"headerlink\" title=\"本网站的滚动条代码示例\"></a>本网站的滚动条代码示例</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">0</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:start</span><span class=\"selector-pseudo\">:increment</span>,</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:end</span><span class=\"selector-pseudo\">:decrement</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: none;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-corner</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">display</span>: block;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0.2);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">-webkit-border-radius</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">8px</span>;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0.5);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-track</span>,</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-thumb</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid transparent;</div><div class=\"line\">  <span class=\"attribute\">border-left</span>: <span class=\"number\">1px</span> solid transparent;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-track</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0,0,0,0.15);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:start</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat <span class=\"number\">0</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:start</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat -<span class=\"number\">15px</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:start</span><span class=\"selector-pseudo\">:active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat -<span class=\"number\">30px</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:end</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">10px</span>;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat <span class=\"number\">0</span> -<span class=\"number\">18px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:end</span><span class=\"selector-pseudo\">:hover</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat -<span class=\"number\">15px</span> -<span class=\"number\">18px</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-pseudo\">::-webkit-scrollbar-button</span><span class=\"selector-pseudo\">:end</span><span class=\"selector-pseudo\">:active</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"built_in\">url</span>(<span class=\"string\">\"../img/scrollbar_arrow.png\"</span>) no-repeat -<span class=\"number\">30px</span> -<span class=\"number\">18px</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cj07ukqj40000zss3l1rycfnv","tag_id":"cj07ukqjf0003zss3kkz9uwru","_id":"cj07ukqjn0008zss36ssveb99"},{"post_id":"cj07ukqjm0006zss3jysvmen4","tag_id":"cj07ukqjf0003zss3kkz9uwru","_id":"cj07ukqjp000azss36xw04kvg"},{"post_id":"cj07ukqjo0009zss3fflnhb28","tag_id":"cj07ukqjn0007zss3dc3slre9","_id":"cj07ukqjq000dzss37gr8vsxw"},{"post_id":"cj07ukqjc0002zss33n1h4gzz","tag_id":"cj07ukqjn0007zss3dc3slre9","_id":"cj07ukqjs000fzss3pab8y3bf"},{"post_id":"cj07ukqjp000bzss3fnc3zblv","tag_id":"cj07ukqjn0007zss3dc3slre9","_id":"cj07ukqjv000izss3bpq9cjhx"},{"post_id":"cj07ukqjh0004zss33zo146qi","tag_id":"cj07ukqjf0003zss3kkz9uwru","_id":"cj07ukqjx000kzss3gmkcvh2a"},{"post_id":"cj07ukqjs000gzss3wlwq1ba9","tag_id":"cj07ukqjn0007zss3dc3slre9","_id":"cj07ukqk0000mzss3p6klpmqr"},{"post_id":"cj07ukqjr000ezss3602hf61h","tag_id":"cj07ukqjv000hzss359kv9gx5","_id":"cj07ukqk4000qzss3hzb4o6i3"},{"post_id":"cj07ukqjr000ezss3602hf61h","tag_id":"cj07ukqk2000ozss3oeg7yzmq","_id":"cj07ukqk4000rzss326i29o1b"},{"post_id":"cj07ukqjw000jzss38t52q771","tag_id":"cj07ukqk4000pzss3ehist2pg","_id":"cj07ukqk5000vzss3nzkmbtjf"},{"post_id":"cj07ukqjw000jzss38t52q771","tag_id":"cj07ukqk2000ozss3oeg7yzmq","_id":"cj07ukqk5000wzss3ff52q7wa"},{"post_id":"cj07ukqjw000jzss38t52q771","tag_id":"cj07ukqk5000tzss3zl8spqis","_id":"cj07ukqk6000yzss31jc54g9x"},{"post_id":"cj07ukqjy000lzss3ndy7mh4d","tag_id":"cj07ukqk5000uzss3ddrygwbz","_id":"cj07ukqk60010zss3k1nfznv0"},{"post_id":"cj07ukqjy000lzss3ndy7mh4d","tag_id":"cj07ukqk6000xzss32b2298f0","_id":"cj07ukqk60011zss3ufgdakli"},{"post_id":"cj07ukqk0000nzss3is84fszw","tag_id":"cj07ukqjf0003zss3kkz9uwru","_id":"cj07ukqk70013zss34m1ifd2a"},{"post_id":"cj07ukqk0000nzss3is84fszw","tag_id":"cj07ukqk6000zzss3moqdpqrn","_id":"cj07ukqk70014zss3409g86al"},{"post_id":"cj07ukqk0000nzss3is84fszw","tag_id":"cj07ukqk70012zss3noqlgbtd","_id":"cj07ukqk70015zss3bte2eijp"}],"Tag":[{"name":"css","_id":"cj07ukqjf0003zss3kkz9uwru"},{"name":"js","_id":"cj07ukqjn0007zss3dc3slre9"},{"name":"html","_id":"cj07ukqjv000hzss359kv9gx5"},{"name":"面试","_id":"cj07ukqk2000ozss3oeg7yzmq"},{"name":"http","_id":"cj07ukqk4000pzss3ehist2pg"},{"name":"浏览器","_id":"cj07ukqk5000tzss3zl8spqis"},{"name":"hexo","_id":"cj07ukqk5000uzss3ddrygwbz"},{"name":"博客","_id":"cj07ukqk6000xzss32b2298f0"},{"name":"模拟滚动条","_id":"cj07ukqk6000zzss3moqdpqrn"},{"name":"摘抄","_id":"cj07ukqk70012zss3noqlgbtd"}]}}